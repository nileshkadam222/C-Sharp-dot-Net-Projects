'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3031
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("JETAIRWAYSDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class JETAIRWAYSDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableAttendance As AttendanceDataTable
    
    Private tableCBrief As CBriefDataTable
    
    Private tableDBrief As DBriefDataTable
    
    Private tableDesignation As DesignationDataTable
    
    Private tableEmployee_entry As Employee_entryDataTable
    
    Private tableEvent As EventDataTable
    
    Private tableFleet As FleetDataTable
    
    Private tableFlight As FlightDataTable
    
    Private tableFlightschedule As FlightscheduleDataTable
    
    Private tableFuelManagement As FuelManagementDataTable
    
    Private tableLogintable As LogintableDataTable
    
    Private tablePassengers As PassengersDataTable
    
    Private tablePaySlip As PaySlipDataTable
    
    Private tableTraining As TrainingDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Attendance")) Is Nothing) Then
                MyBase.Tables.Add(New AttendanceDataTable(ds.Tables("Attendance")))
            End If
            If (Not (ds.Tables("CBrief")) Is Nothing) Then
                MyBase.Tables.Add(New CBriefDataTable(ds.Tables("CBrief")))
            End If
            If (Not (ds.Tables("DBrief")) Is Nothing) Then
                MyBase.Tables.Add(New DBriefDataTable(ds.Tables("DBrief")))
            End If
            If (Not (ds.Tables("Designation")) Is Nothing) Then
                MyBase.Tables.Add(New DesignationDataTable(ds.Tables("Designation")))
            End If
            If (Not (ds.Tables("Employee_entry")) Is Nothing) Then
                MyBase.Tables.Add(New Employee_entryDataTable(ds.Tables("Employee_entry")))
            End If
            If (Not (ds.Tables("Event")) Is Nothing) Then
                MyBase.Tables.Add(New EventDataTable(ds.Tables("Event")))
            End If
            If (Not (ds.Tables("Fleet")) Is Nothing) Then
                MyBase.Tables.Add(New FleetDataTable(ds.Tables("Fleet")))
            End If
            If (Not (ds.Tables("Flight")) Is Nothing) Then
                MyBase.Tables.Add(New FlightDataTable(ds.Tables("Flight")))
            End If
            If (Not (ds.Tables("Flightschedule")) Is Nothing) Then
                MyBase.Tables.Add(New FlightscheduleDataTable(ds.Tables("Flightschedule")))
            End If
            If (Not (ds.Tables("FuelManagement")) Is Nothing) Then
                MyBase.Tables.Add(New FuelManagementDataTable(ds.Tables("FuelManagement")))
            End If
            If (Not (ds.Tables("Logintable")) Is Nothing) Then
                MyBase.Tables.Add(New LogintableDataTable(ds.Tables("Logintable")))
            End If
            If (Not (ds.Tables("Passengers")) Is Nothing) Then
                MyBase.Tables.Add(New PassengersDataTable(ds.Tables("Passengers")))
            End If
            If (Not (ds.Tables("PaySlip")) Is Nothing) Then
                MyBase.Tables.Add(New PaySlipDataTable(ds.Tables("PaySlip")))
            End If
            If (Not (ds.Tables("Training")) Is Nothing) Then
                MyBase.Tables.Add(New TrainingDataTable(ds.Tables("Training")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Attendance() As AttendanceDataTable
        Get
            Return Me.tableAttendance
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CBrief() As CBriefDataTable
        Get
            Return Me.tableCBrief
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DBrief() As DBriefDataTable
        Get
            Return Me.tableDBrief
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Designation() As DesignationDataTable
        Get
            Return Me.tableDesignation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Employee_entry() As Employee_entryDataTable
        Get
            Return Me.tableEmployee_entry
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Event() As EventDataTable
        Get
            Return Me.tableEvent
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Fleet() As FleetDataTable
        Get
            Return Me.tableFleet
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Flight() As FlightDataTable
        Get
            Return Me.tableFlight
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Flightschedule() As FlightscheduleDataTable
        Get
            Return Me.tableFlightschedule
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FuelManagement() As FuelManagementDataTable
        Get
            Return Me.tableFuelManagement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Logintable() As LogintableDataTable
        Get
            Return Me.tableLogintable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Passengers() As PassengersDataTable
        Get
            Return Me.tablePassengers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PaySlip() As PaySlipDataTable
        Get
            Return Me.tablePaySlip
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Training() As TrainingDataTable
        Get
            Return Me.tableTraining
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As JETAIRWAYSDataSet = CType(MyBase.Clone,JETAIRWAYSDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Attendance")) Is Nothing) Then
                MyBase.Tables.Add(New AttendanceDataTable(ds.Tables("Attendance")))
            End If
            If (Not (ds.Tables("CBrief")) Is Nothing) Then
                MyBase.Tables.Add(New CBriefDataTable(ds.Tables("CBrief")))
            End If
            If (Not (ds.Tables("DBrief")) Is Nothing) Then
                MyBase.Tables.Add(New DBriefDataTable(ds.Tables("DBrief")))
            End If
            If (Not (ds.Tables("Designation")) Is Nothing) Then
                MyBase.Tables.Add(New DesignationDataTable(ds.Tables("Designation")))
            End If
            If (Not (ds.Tables("Employee_entry")) Is Nothing) Then
                MyBase.Tables.Add(New Employee_entryDataTable(ds.Tables("Employee_entry")))
            End If
            If (Not (ds.Tables("Event")) Is Nothing) Then
                MyBase.Tables.Add(New EventDataTable(ds.Tables("Event")))
            End If
            If (Not (ds.Tables("Fleet")) Is Nothing) Then
                MyBase.Tables.Add(New FleetDataTable(ds.Tables("Fleet")))
            End If
            If (Not (ds.Tables("Flight")) Is Nothing) Then
                MyBase.Tables.Add(New FlightDataTable(ds.Tables("Flight")))
            End If
            If (Not (ds.Tables("Flightschedule")) Is Nothing) Then
                MyBase.Tables.Add(New FlightscheduleDataTable(ds.Tables("Flightschedule")))
            End If
            If (Not (ds.Tables("FuelManagement")) Is Nothing) Then
                MyBase.Tables.Add(New FuelManagementDataTable(ds.Tables("FuelManagement")))
            End If
            If (Not (ds.Tables("Logintable")) Is Nothing) Then
                MyBase.Tables.Add(New LogintableDataTable(ds.Tables("Logintable")))
            End If
            If (Not (ds.Tables("Passengers")) Is Nothing) Then
                MyBase.Tables.Add(New PassengersDataTable(ds.Tables("Passengers")))
            End If
            If (Not (ds.Tables("PaySlip")) Is Nothing) Then
                MyBase.Tables.Add(New PaySlipDataTable(ds.Tables("PaySlip")))
            End If
            If (Not (ds.Tables("Training")) Is Nothing) Then
                MyBase.Tables.Add(New TrainingDataTable(ds.Tables("Training")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAttendance = CType(MyBase.Tables("Attendance"),AttendanceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAttendance) Is Nothing) Then
                Me.tableAttendance.InitVars
            End If
        End If
        Me.tableCBrief = CType(MyBase.Tables("CBrief"),CBriefDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCBrief) Is Nothing) Then
                Me.tableCBrief.InitVars
            End If
        End If
        Me.tableDBrief = CType(MyBase.Tables("DBrief"),DBriefDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDBrief) Is Nothing) Then
                Me.tableDBrief.InitVars
            End If
        End If
        Me.tableDesignation = CType(MyBase.Tables("Designation"),DesignationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDesignation) Is Nothing) Then
                Me.tableDesignation.InitVars
            End If
        End If
        Me.tableEmployee_entry = CType(MyBase.Tables("Employee_entry"),Employee_entryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEmployee_entry) Is Nothing) Then
                Me.tableEmployee_entry.InitVars
            End If
        End If
        Me.tableEvent = CType(MyBase.Tables("Event"),EventDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEvent) Is Nothing) Then
                Me.tableEvent.InitVars
            End If
        End If
        Me.tableFleet = CType(MyBase.Tables("Fleet"),FleetDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFleet) Is Nothing) Then
                Me.tableFleet.InitVars
            End If
        End If
        Me.tableFlight = CType(MyBase.Tables("Flight"),FlightDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFlight) Is Nothing) Then
                Me.tableFlight.InitVars
            End If
        End If
        Me.tableFlightschedule = CType(MyBase.Tables("Flightschedule"),FlightscheduleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFlightschedule) Is Nothing) Then
                Me.tableFlightschedule.InitVars
            End If
        End If
        Me.tableFuelManagement = CType(MyBase.Tables("FuelManagement"),FuelManagementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFuelManagement) Is Nothing) Then
                Me.tableFuelManagement.InitVars
            End If
        End If
        Me.tableLogintable = CType(MyBase.Tables("Logintable"),LogintableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLogintable) Is Nothing) Then
                Me.tableLogintable.InitVars
            End If
        End If
        Me.tablePassengers = CType(MyBase.Tables("Passengers"),PassengersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePassengers) Is Nothing) Then
                Me.tablePassengers.InitVars
            End If
        End If
        Me.tablePaySlip = CType(MyBase.Tables("PaySlip"),PaySlipDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePaySlip) Is Nothing) Then
                Me.tablePaySlip.InitVars
            End If
        End If
        Me.tableTraining = CType(MyBase.Tables("Training"),TrainingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTraining) Is Nothing) Then
                Me.tableTraining.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "JETAIRWAYSDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/JETAIRWAYSDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAttendance = New AttendanceDataTable
        MyBase.Tables.Add(Me.tableAttendance)
        Me.tableCBrief = New CBriefDataTable
        MyBase.Tables.Add(Me.tableCBrief)
        Me.tableDBrief = New DBriefDataTable
        MyBase.Tables.Add(Me.tableDBrief)
        Me.tableDesignation = New DesignationDataTable
        MyBase.Tables.Add(Me.tableDesignation)
        Me.tableEmployee_entry = New Employee_entryDataTable
        MyBase.Tables.Add(Me.tableEmployee_entry)
        Me.tableEvent = New EventDataTable
        MyBase.Tables.Add(Me.tableEvent)
        Me.tableFleet = New FleetDataTable
        MyBase.Tables.Add(Me.tableFleet)
        Me.tableFlight = New FlightDataTable
        MyBase.Tables.Add(Me.tableFlight)
        Me.tableFlightschedule = New FlightscheduleDataTable
        MyBase.Tables.Add(Me.tableFlightschedule)
        Me.tableFuelManagement = New FuelManagementDataTable
        MyBase.Tables.Add(Me.tableFuelManagement)
        Me.tableLogintable = New LogintableDataTable
        MyBase.Tables.Add(Me.tableLogintable)
        Me.tablePassengers = New PassengersDataTable
        MyBase.Tables.Add(Me.tablePassengers)
        Me.tablePaySlip = New PaySlipDataTable
        MyBase.Tables.Add(Me.tablePaySlip)
        Me.tableTraining = New TrainingDataTable
        MyBase.Tables.Add(Me.tableTraining)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAttendance() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCBrief() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDBrief() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDesignation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEmployee_entry() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_Event() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFleet() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFlight() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFlightschedule() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFuelManagement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLogintable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePassengers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePaySlip() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTraining() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub AttendanceRowChangeEventHandler(ByVal sender As Object, ByVal e As AttendanceRowChangeEvent)
    
    Public Delegate Sub CBriefRowChangeEventHandler(ByVal sender As Object, ByVal e As CBriefRowChangeEvent)
    
    Public Delegate Sub DBriefRowChangeEventHandler(ByVal sender As Object, ByVal e As DBriefRowChangeEvent)
    
    Public Delegate Sub DesignationRowChangeEventHandler(ByVal sender As Object, ByVal e As DesignationRowChangeEvent)
    
    Public Delegate Sub Employee_entryRowChangeEventHandler(ByVal sender As Object, ByVal e As Employee_entryRowChangeEvent)
    
    Public Delegate Sub EventRowChangeEventHandler(ByVal sender As Object, ByVal e As EventRowChangeEvent)
    
    Public Delegate Sub FleetRowChangeEventHandler(ByVal sender As Object, ByVal e As FleetRowChangeEvent)
    
    Public Delegate Sub FlightRowChangeEventHandler(ByVal sender As Object, ByVal e As FlightRowChangeEvent)
    
    Public Delegate Sub FlightscheduleRowChangeEventHandler(ByVal sender As Object, ByVal e As FlightscheduleRowChangeEvent)
    
    Public Delegate Sub FuelManagementRowChangeEventHandler(ByVal sender As Object, ByVal e As FuelManagementRowChangeEvent)
    
    Public Delegate Sub LogintableRowChangeEventHandler(ByVal sender As Object, ByVal e As LogintableRowChangeEvent)
    
    Public Delegate Sub PassengersRowChangeEventHandler(ByVal sender As Object, ByVal e As PassengersRowChangeEvent)
    
    Public Delegate Sub PaySlipRowChangeEventHandler(ByVal sender As Object, ByVal e As PaySlipRowChangeEvent)
    
    Public Delegate Sub TrainingRowChangeEventHandler(ByVal sender As Object, ByVal e As TrainingRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AttendanceDataTable
        Inherits Global.System.Data.TypedTableBase(Of AttendanceRow)
        
        Private columnEmpId As Global.System.Data.DataColumn
        
        Private columnCurrentDate As Global.System.Data.DataColumn
        
        Private columnTimeIn As Global.System.Data.DataColumn
        
        Private columnTimeOut As Global.System.Data.DataColumn
        
        Private columnOT As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Attendance"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmpId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrentDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrentDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TimeInColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeIn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TimeOutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeOut
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AttendanceRow
            Get
                Return CType(Me.Rows(index),AttendanceRow)
            End Get
        End Property
        
        Public Event AttendanceRowChanging As AttendanceRowChangeEventHandler
        
        Public Event AttendanceRowChanged As AttendanceRowChangeEventHandler
        
        Public Event AttendanceRowDeleting As AttendanceRowChangeEventHandler
        
        Public Event AttendanceRowDeleted As AttendanceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAttendanceRow(ByVal row As AttendanceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAttendanceRow(ByVal EmpId As String, ByVal CurrentDate As Date, ByVal TimeIn As Date, ByVal TimeOut As Date, ByVal OT As String, ByVal Type As String) As AttendanceRow
            Dim rowAttendanceRow As AttendanceRow = CType(Me.NewRow,AttendanceRow)
            Dim columnValuesArray() As Object = New Object() {EmpId, CurrentDate, TimeIn, TimeOut, OT, Type}
            rowAttendanceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAttendanceRow)
            Return rowAttendanceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AttendanceDataTable = CType(MyBase.Clone,AttendanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AttendanceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEmpId = MyBase.Columns("EmpId")
            Me.columnCurrentDate = MyBase.Columns("CurrentDate")
            Me.columnTimeIn = MyBase.Columns("TimeIn")
            Me.columnTimeOut = MyBase.Columns("TimeOut")
            Me.columnOT = MyBase.Columns("OT")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEmpId = New Global.System.Data.DataColumn("EmpId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmpId)
            Me.columnCurrentDate = New Global.System.Data.DataColumn("CurrentDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrentDate)
            Me.columnTimeIn = New Global.System.Data.DataColumn("TimeIn", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeIn)
            Me.columnTimeOut = New Global.System.Data.DataColumn("TimeOut", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeOut)
            Me.columnOT = New Global.System.Data.DataColumn("OT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOT)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnEmpId.MaxLength = 50
            Me.columnOT.MaxLength = 50
            Me.columnType.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAttendanceRow() As AttendanceRow
            Return CType(Me.NewRow,AttendanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AttendanceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AttendanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AttendanceRowChangedEvent) Is Nothing) Then
                RaiseEvent AttendanceRowChanged(Me, New AttendanceRowChangeEvent(CType(e.Row,AttendanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AttendanceRowChangingEvent) Is Nothing) Then
                RaiseEvent AttendanceRowChanging(Me, New AttendanceRowChangeEvent(CType(e.Row,AttendanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AttendanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent AttendanceRowDeleted(Me, New AttendanceRowChangeEvent(CType(e.Row,AttendanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AttendanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent AttendanceRowDeleting(Me, New AttendanceRowChangeEvent(CType(e.Row,AttendanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAttendanceRow(ByVal row As AttendanceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AttendanceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CBriefDataTable
        Inherits Global.System.Data.TypedTableBase(Of CBriefRow)
        
        Private columnFlight_no As Global.System.Data.DataColumn
        
        Private columnFlight_date As Global.System.Data.DataColumn
        
        Private columnReg_no As Global.System.Data.DataColumn
        
        Private columnBay_no As Global.System.Data.DataColumn
        
        Private columnAircraft_type As Global.System.Data.DataColumn
        
        Private columnEngine As Global.System.Data.DataColumn
        
        Private columnMFrom1 As Global.System.Data.DataColumn
        
        Private columnTo1 As Global.System.Data.DataColumn
        
        Private columnSTD1 As Global.System.Data.DataColumn
        
        Private columnSTD11 As Global.System.Data.DataColumn
        
        Private columnSTA1 As Global.System.Data.DataColumn
        
        Private columnSTA11 As Global.System.Data.DataColumn
        
        Private columnMFrom2 As Global.System.Data.DataColumn
        
        Private columnTo2 As Global.System.Data.DataColumn
        
        Private columnSTD2 As Global.System.Data.DataColumn
        
        Private columnSTD22 As Global.System.Data.DataColumn
        
        Private columnSTA2 As Global.System.Data.DataColumn
        
        Private columnSTA22 As Global.System.Data.DataColumn
        
        Private columnMFrom3 As Global.System.Data.DataColumn
        
        Private columnTo3 As Global.System.Data.DataColumn
        
        Private columnSTD3 As Global.System.Data.DataColumn
        
        Private columnSTD33 As Global.System.Data.DataColumn
        
        Private columnSTA3 As Global.System.Data.DataColumn
        
        Private columnSTA33 As Global.System.Data.DataColumn
        
        Private columnDep_Fuel As Global.System.Data.DataColumn
        
        Private columnBurn_Off_Fuel As Global.System.Data.DataColumn
        
        Private columnExtra As Global.System.Data.DataColumn
        
        Private columnSector As Global.System.Data.DataColumn
        
        Private columnExtra_Fuel_Reason As Global.System.Data.DataColumn
        
        Private columnEmergency As Global.System.Data.DataColumn
        
        Private columnEmergency_landing_time As Global.System.Data.DataColumn
        
        Private columnLanging_Reason As Global.System.Data.DataColumn
        
        Private columnCaptain_name As Global.System.Data.DataColumn
        
        Private columnFirst_Off_name As Global.System.Data.DataColumn
        
        Private columnAdditional As Global.System.Data.DataColumn
        
        Private columnCabin As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CBrief"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bay_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBay_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Aircraft_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAircraft_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EngineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEngine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFrom1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFrom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property To1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFrom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFrom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property To2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFrom3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFrom3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property To3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD33Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD33
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA33Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA33
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dep_FuelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep_Fuel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Burn_Off_FuelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBurn_Off_Fuel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExtraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExtra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Extra_Fuel_ReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExtra_Fuel_Reason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmergencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmergency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Emergency_landing_timeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmergency_landing_time
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Langing_ReasonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanging_Reason
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Captain_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaptain_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First_Off_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst_Off_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdditionalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdditional
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CabinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCabin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CBriefRow
            Get
                Return CType(Me.Rows(index),CBriefRow)
            End Get
        End Property
        
        Public Event CBriefRowChanging As CBriefRowChangeEventHandler
        
        Public Event CBriefRowChanged As CBriefRowChangeEventHandler
        
        Public Event CBriefRowDeleting As CBriefRowChangeEventHandler
        
        Public Event CBriefRowDeleted As CBriefRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCBriefRow(ByVal row As CBriefRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCBriefRow( _
                    ByVal Flight_no As String,  _
                    ByVal Flight_date As String,  _
                    ByVal Reg_no As String,  _
                    ByVal Bay_no As String,  _
                    ByVal Aircraft_type As String,  _
                    ByVal Engine As String,  _
                    ByVal MFrom1 As String,  _
                    ByVal To1 As String,  _
                    ByVal STD1 As String,  _
                    ByVal STD11 As String,  _
                    ByVal STA1 As String,  _
                    ByVal STA11 As String,  _
                    ByVal MFrom2 As String,  _
                    ByVal To2 As String,  _
                    ByVal STD2 As String,  _
                    ByVal STD22 As String,  _
                    ByVal STA2 As String,  _
                    ByVal STA22 As String,  _
                    ByVal MFrom3 As String,  _
                    ByVal To3 As String,  _
                    ByVal STD3 As String,  _
                    ByVal STD33 As String,  _
                    ByVal STA3 As String,  _
                    ByVal STA33 As String,  _
                    ByVal Dep_Fuel As String,  _
                    ByVal Burn_Off_Fuel As String,  _
                    ByVal Extra As String,  _
                    ByVal Sector As String,  _
                    ByVal Extra_Fuel_Reason As String,  _
                    ByVal Emergency As String,  _
                    ByVal Emergency_landing_time As String,  _
                    ByVal Langing_Reason As String,  _
                    ByVal Captain_name As String,  _
                    ByVal First_Off_name As String,  _
                    ByVal Additional As String,  _
                    ByVal Cabin As String) As CBriefRow
            Dim rowCBriefRow As CBriefRow = CType(Me.NewRow,CBriefRow)
            Dim columnValuesArray() As Object = New Object() {Flight_no, Flight_date, Reg_no, Bay_no, Aircraft_type, Engine, MFrom1, To1, STD1, STD11, STA1, STA11, MFrom2, To2, STD2, STD22, STA2, STA22, MFrom3, To3, STD3, STD33, STA3, STA33, Dep_Fuel, Burn_Off_Fuel, Extra, Sector, Extra_Fuel_Reason, Emergency, Emergency_landing_time, Langing_Reason, Captain_name, First_Off_name, Additional, Cabin}
            rowCBriefRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCBriefRow)
            Return rowCBriefRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CBriefDataTable = CType(MyBase.Clone,CBriefDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CBriefDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFlight_no = MyBase.Columns("Flight_no")
            Me.columnFlight_date = MyBase.Columns("Flight_date")
            Me.columnReg_no = MyBase.Columns("Reg_no")
            Me.columnBay_no = MyBase.Columns("Bay_no")
            Me.columnAircraft_type = MyBase.Columns("Aircraft_type")
            Me.columnEngine = MyBase.Columns("Engine")
            Me.columnMFrom1 = MyBase.Columns("MFrom1")
            Me.columnTo1 = MyBase.Columns("To1")
            Me.columnSTD1 = MyBase.Columns("STD1")
            Me.columnSTD11 = MyBase.Columns("STD11")
            Me.columnSTA1 = MyBase.Columns("STA1")
            Me.columnSTA11 = MyBase.Columns("STA11")
            Me.columnMFrom2 = MyBase.Columns("MFrom2")
            Me.columnTo2 = MyBase.Columns("To2")
            Me.columnSTD2 = MyBase.Columns("STD2")
            Me.columnSTD22 = MyBase.Columns("STD22")
            Me.columnSTA2 = MyBase.Columns("STA2")
            Me.columnSTA22 = MyBase.Columns("STA22")
            Me.columnMFrom3 = MyBase.Columns("MFrom3")
            Me.columnTo3 = MyBase.Columns("To3")
            Me.columnSTD3 = MyBase.Columns("STD3")
            Me.columnSTD33 = MyBase.Columns("STD33")
            Me.columnSTA3 = MyBase.Columns("STA3")
            Me.columnSTA33 = MyBase.Columns("STA33")
            Me.columnDep_Fuel = MyBase.Columns("Dep_Fuel")
            Me.columnBurn_Off_Fuel = MyBase.Columns("Burn_Off_Fuel")
            Me.columnExtra = MyBase.Columns("Extra")
            Me.columnSector = MyBase.Columns("Sector")
            Me.columnExtra_Fuel_Reason = MyBase.Columns("Extra_Fuel_Reason")
            Me.columnEmergency = MyBase.Columns("Emergency")
            Me.columnEmergency_landing_time = MyBase.Columns("Emergency_landing_time")
            Me.columnLanging_Reason = MyBase.Columns("Langing_Reason")
            Me.columnCaptain_name = MyBase.Columns("Captain_name")
            Me.columnFirst_Off_name = MyBase.Columns("First_Off_name")
            Me.columnAdditional = MyBase.Columns("Additional")
            Me.columnCabin = MyBase.Columns("Cabin")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFlight_no = New Global.System.Data.DataColumn("Flight_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_no)
            Me.columnFlight_date = New Global.System.Data.DataColumn("Flight_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_date)
            Me.columnReg_no = New Global.System.Data.DataColumn("Reg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_no)
            Me.columnBay_no = New Global.System.Data.DataColumn("Bay_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBay_no)
            Me.columnAircraft_type = New Global.System.Data.DataColumn("Aircraft_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAircraft_type)
            Me.columnEngine = New Global.System.Data.DataColumn("Engine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEngine)
            Me.columnMFrom1 = New Global.System.Data.DataColumn("MFrom1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFrom1)
            Me.columnTo1 = New Global.System.Data.DataColumn("To1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTo1)
            Me.columnSTD1 = New Global.System.Data.DataColumn("STD1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD1)
            Me.columnSTD11 = New Global.System.Data.DataColumn("STD11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD11)
            Me.columnSTA1 = New Global.System.Data.DataColumn("STA1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA1)
            Me.columnSTA11 = New Global.System.Data.DataColumn("STA11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA11)
            Me.columnMFrom2 = New Global.System.Data.DataColumn("MFrom2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFrom2)
            Me.columnTo2 = New Global.System.Data.DataColumn("To2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTo2)
            Me.columnSTD2 = New Global.System.Data.DataColumn("STD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD2)
            Me.columnSTD22 = New Global.System.Data.DataColumn("STD22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD22)
            Me.columnSTA2 = New Global.System.Data.DataColumn("STA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA2)
            Me.columnSTA22 = New Global.System.Data.DataColumn("STA22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA22)
            Me.columnMFrom3 = New Global.System.Data.DataColumn("MFrom3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFrom3)
            Me.columnTo3 = New Global.System.Data.DataColumn("To3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTo3)
            Me.columnSTD3 = New Global.System.Data.DataColumn("STD3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD3)
            Me.columnSTD33 = New Global.System.Data.DataColumn("STD33", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD33)
            Me.columnSTA3 = New Global.System.Data.DataColumn("STA3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA3)
            Me.columnSTA33 = New Global.System.Data.DataColumn("STA33", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA33)
            Me.columnDep_Fuel = New Global.System.Data.DataColumn("Dep_Fuel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep_Fuel)
            Me.columnBurn_Off_Fuel = New Global.System.Data.DataColumn("Burn_Off_Fuel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBurn_Off_Fuel)
            Me.columnExtra = New Global.System.Data.DataColumn("Extra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtra)
            Me.columnSector = New Global.System.Data.DataColumn("Sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSector)
            Me.columnExtra_Fuel_Reason = New Global.System.Data.DataColumn("Extra_Fuel_Reason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtra_Fuel_Reason)
            Me.columnEmergency = New Global.System.Data.DataColumn("Emergency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmergency)
            Me.columnEmergency_landing_time = New Global.System.Data.DataColumn("Emergency_landing_time", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmergency_landing_time)
            Me.columnLanging_Reason = New Global.System.Data.DataColumn("Langing_Reason", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanging_Reason)
            Me.columnCaptain_name = New Global.System.Data.DataColumn("Captain_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptain_name)
            Me.columnFirst_Off_name = New Global.System.Data.DataColumn("First_Off_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst_Off_name)
            Me.columnAdditional = New Global.System.Data.DataColumn("Additional", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdditional)
            Me.columnCabin = New Global.System.Data.DataColumn("Cabin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCabin)
            Me.columnFlight_no.AllowDBNull = false
            Me.columnFlight_no.MaxLength = 50
            Me.columnFlight_date.AllowDBNull = false
            Me.columnFlight_date.MaxLength = 50
            Me.columnReg_no.AllowDBNull = false
            Me.columnReg_no.MaxLength = 50
            Me.columnBay_no.AllowDBNull = false
            Me.columnBay_no.MaxLength = 50
            Me.columnAircraft_type.AllowDBNull = false
            Me.columnAircraft_type.MaxLength = 50
            Me.columnEngine.AllowDBNull = false
            Me.columnEngine.MaxLength = 50
            Me.columnMFrom1.AllowDBNull = false
            Me.columnMFrom1.MaxLength = 50
            Me.columnTo1.AllowDBNull = false
            Me.columnTo1.MaxLength = 50
            Me.columnSTD1.AllowDBNull = false
            Me.columnSTD1.MaxLength = 50
            Me.columnSTD11.AllowDBNull = false
            Me.columnSTD11.MaxLength = 50
            Me.columnSTA1.AllowDBNull = false
            Me.columnSTA1.MaxLength = 50
            Me.columnSTA11.AllowDBNull = false
            Me.columnSTA11.MaxLength = 50
            Me.columnMFrom2.AllowDBNull = false
            Me.columnMFrom2.MaxLength = 50
            Me.columnTo2.AllowDBNull = false
            Me.columnTo2.MaxLength = 50
            Me.columnSTD2.AllowDBNull = false
            Me.columnSTD2.MaxLength = 50
            Me.columnSTD22.AllowDBNull = false
            Me.columnSTD22.MaxLength = 50
            Me.columnSTA2.AllowDBNull = false
            Me.columnSTA2.MaxLength = 50
            Me.columnSTA22.AllowDBNull = false
            Me.columnSTA22.MaxLength = 50
            Me.columnMFrom3.AllowDBNull = false
            Me.columnMFrom3.MaxLength = 50
            Me.columnTo3.AllowDBNull = false
            Me.columnTo3.MaxLength = 50
            Me.columnSTD3.AllowDBNull = false
            Me.columnSTD3.MaxLength = 50
            Me.columnSTD33.AllowDBNull = false
            Me.columnSTD33.MaxLength = 50
            Me.columnSTA3.AllowDBNull = false
            Me.columnSTA3.MaxLength = 50
            Me.columnSTA33.AllowDBNull = false
            Me.columnSTA33.MaxLength = 50
            Me.columnDep_Fuel.AllowDBNull = false
            Me.columnDep_Fuel.MaxLength = 50
            Me.columnBurn_Off_Fuel.AllowDBNull = false
            Me.columnBurn_Off_Fuel.MaxLength = 50
            Me.columnExtra.AllowDBNull = false
            Me.columnExtra.MaxLength = 50
            Me.columnSector.AllowDBNull = false
            Me.columnSector.MaxLength = 50
            Me.columnExtra_Fuel_Reason.AllowDBNull = false
            Me.columnExtra_Fuel_Reason.MaxLength = 50
            Me.columnEmergency.AllowDBNull = false
            Me.columnEmergency.MaxLength = 50
            Me.columnEmergency_landing_time.AllowDBNull = false
            Me.columnEmergency_landing_time.MaxLength = 50
            Me.columnLanging_Reason.AllowDBNull = false
            Me.columnLanging_Reason.MaxLength = 50
            Me.columnCaptain_name.AllowDBNull = false
            Me.columnCaptain_name.MaxLength = 50
            Me.columnFirst_Off_name.AllowDBNull = false
            Me.columnFirst_Off_name.MaxLength = 50
            Me.columnAdditional.AllowDBNull = false
            Me.columnAdditional.MaxLength = 50
            Me.columnCabin.AllowDBNull = false
            Me.columnCabin.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCBriefRow() As CBriefRow
            Return CType(Me.NewRow,CBriefRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CBriefRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CBriefRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CBriefRowChangedEvent) Is Nothing) Then
                RaiseEvent CBriefRowChanged(Me, New CBriefRowChangeEvent(CType(e.Row,CBriefRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CBriefRowChangingEvent) Is Nothing) Then
                RaiseEvent CBriefRowChanging(Me, New CBriefRowChangeEvent(CType(e.Row,CBriefRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CBriefRowDeletedEvent) Is Nothing) Then
                RaiseEvent CBriefRowDeleted(Me, New CBriefRowChangeEvent(CType(e.Row,CBriefRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CBriefRowDeletingEvent) Is Nothing) Then
                RaiseEvent CBriefRowDeleting(Me, New CBriefRowChangeEvent(CType(e.Row,CBriefRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCBriefRow(ByVal row As CBriefRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CBriefDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DBriefDataTable
        Inherits Global.System.Data.TypedTableBase(Of DBriefRow)
        
        Private columnFlight_no As Global.System.Data.DataColumn
        
        Private columnFlight_date As Global.System.Data.DataColumn
        
        Private columnReg_no As Global.System.Data.DataColumn
        
        Private columnBay_no As Global.System.Data.DataColumn
        
        Private columnAircraft_type As Global.System.Data.DataColumn
        
        Private columnEngine As Global.System.Data.DataColumn
        
        Private columnMFrom As Global.System.Data.DataColumn
        
        Private columnTo1 As Global.System.Data.DataColumn
        
        Private columnSTD1 As Global.System.Data.DataColumn
        
        Private columnSTD11 As Global.System.Data.DataColumn
        
        Private columnSTA1 As Global.System.Data.DataColumn
        
        Private columnSTA11 As Global.System.Data.DataColumn
        
        Private columnMFrom2 As Global.System.Data.DataColumn
        
        Private columnTo2 As Global.System.Data.DataColumn
        
        Private columnSTD2 As Global.System.Data.DataColumn
        
        Private columnSTD22 As Global.System.Data.DataColumn
        
        Private columnSTA2 As Global.System.Data.DataColumn
        
        Private columnSTA22 As Global.System.Data.DataColumn
        
        Private columnMFrom3 As Global.System.Data.DataColumn
        
        Private columnTo3 As Global.System.Data.DataColumn
        
        Private columnSTD3 As Global.System.Data.DataColumn
        
        Private columnSTD33 As Global.System.Data.DataColumn
        
        Private columnSTA3 As Global.System.Data.DataColumn
        
        Private columnSTA33 As Global.System.Data.DataColumn
        
        Private columnRecomended_Fuel As Global.System.Data.DataColumn
        
        Private columnExtra As Global.System.Data.DataColumn
        
        Private columnCaptain_name As Global.System.Data.DataColumn
        
        Private columnFirst_Off_name As Global.System.Data.DataColumn
        
        Private columnAdditional As Global.System.Data.DataColumn
        
        Private columnAirhostess_name As Global.System.Data.DataColumn
        
        Private columnAlternate_destination As Global.System.Data.DataColumn
        
        Private columnDispatch_no As Global.System.Data.DataColumn
        
        Private columnManager_no As Global.System.Data.DataColumn
        
        Private columnWind As Global.System.Data.DataColumn
        
        Private columnHumidity As Global.System.Data.DataColumn
        
        Private columnPressure As Global.System.Data.DataColumn
        
        Private columnDew As Global.System.Data.DataColumn
        
        Private columnVisibility As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DBrief"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bay_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBay_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Aircraft_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAircraft_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EngineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEngine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property To1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFrom2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFrom2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property To2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFrom3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFrom3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property To3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD33Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD33
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA33Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA33
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Recomended_FuelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecomended_Fuel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExtraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExtra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Captain_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaptain_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First_Off_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst_Off_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdditionalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdditional
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Airhostess_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAirhostess_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Alternate_destinationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlternate_destination
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dispatch_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispatch_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Manager_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManager_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WindColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWind
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HumidityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHumidity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PressureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPressure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDew
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisibilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisibility
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DBriefRow
            Get
                Return CType(Me.Rows(index),DBriefRow)
            End Get
        End Property
        
        Public Event DBriefRowChanging As DBriefRowChangeEventHandler
        
        Public Event DBriefRowChanged As DBriefRowChangeEventHandler
        
        Public Event DBriefRowDeleting As DBriefRowChangeEventHandler
        
        Public Event DBriefRowDeleted As DBriefRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDBriefRow(ByVal row As DBriefRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDBriefRow( _
                    ByVal Flight_no As String,  _
                    ByVal Flight_date As String,  _
                    ByVal Reg_no As String,  _
                    ByVal Bay_no As String,  _
                    ByVal Aircraft_type As String,  _
                    ByVal Engine As String,  _
                    ByVal MFrom As String,  _
                    ByVal To1 As String,  _
                    ByVal STD1 As String,  _
                    ByVal STD11 As String,  _
                    ByVal STA1 As String,  _
                    ByVal STA11 As String,  _
                    ByVal MFrom2 As String,  _
                    ByVal To2 As String,  _
                    ByVal STD2 As String,  _
                    ByVal STD22 As String,  _
                    ByVal STA2 As String,  _
                    ByVal STA22 As String,  _
                    ByVal MFrom3 As String,  _
                    ByVal To3 As String,  _
                    ByVal STD3 As String,  _
                    ByVal STD33 As String,  _
                    ByVal STA3 As String,  _
                    ByVal STA33 As String,  _
                    ByVal Recomended_Fuel As String,  _
                    ByVal Extra As String,  _
                    ByVal Captain_name As String,  _
                    ByVal First_Off_name As String,  _
                    ByVal Additional As String,  _
                    ByVal Airhostess_name As String,  _
                    ByVal Alternate_destination As String,  _
                    ByVal Dispatch_no As String,  _
                    ByVal Manager_no As String,  _
                    ByVal Wind As String,  _
                    ByVal Humidity As String,  _
                    ByVal Pressure As String,  _
                    ByVal Dew As String,  _
                    ByVal Visibility As String,  _
                    ByVal Type As String) As DBriefRow
            Dim rowDBriefRow As DBriefRow = CType(Me.NewRow,DBriefRow)
            Dim columnValuesArray() As Object = New Object() {Flight_no, Flight_date, Reg_no, Bay_no, Aircraft_type, Engine, MFrom, To1, STD1, STD11, STA1, STA11, MFrom2, To2, STD2, STD22, STA2, STA22, MFrom3, To3, STD3, STD33, STA3, STA33, Recomended_Fuel, Extra, Captain_name, First_Off_name, Additional, Airhostess_name, Alternate_destination, Dispatch_no, Manager_no, Wind, Humidity, Pressure, Dew, Visibility, Type}
            rowDBriefRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDBriefRow)
            Return rowDBriefRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DBriefDataTable = CType(MyBase.Clone,DBriefDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DBriefDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFlight_no = MyBase.Columns("Flight_no")
            Me.columnFlight_date = MyBase.Columns("Flight_date")
            Me.columnReg_no = MyBase.Columns("Reg_no")
            Me.columnBay_no = MyBase.Columns("Bay_no")
            Me.columnAircraft_type = MyBase.Columns("Aircraft_type")
            Me.columnEngine = MyBase.Columns("Engine")
            Me.columnMFrom = MyBase.Columns("MFrom")
            Me.columnTo1 = MyBase.Columns("To1")
            Me.columnSTD1 = MyBase.Columns("STD1")
            Me.columnSTD11 = MyBase.Columns("STD11")
            Me.columnSTA1 = MyBase.Columns("STA1")
            Me.columnSTA11 = MyBase.Columns("STA11")
            Me.columnMFrom2 = MyBase.Columns("MFrom2")
            Me.columnTo2 = MyBase.Columns("To2")
            Me.columnSTD2 = MyBase.Columns("STD2")
            Me.columnSTD22 = MyBase.Columns("STD22")
            Me.columnSTA2 = MyBase.Columns("STA2")
            Me.columnSTA22 = MyBase.Columns("STA22")
            Me.columnMFrom3 = MyBase.Columns("MFrom3")
            Me.columnTo3 = MyBase.Columns("To3")
            Me.columnSTD3 = MyBase.Columns("STD3")
            Me.columnSTD33 = MyBase.Columns("STD33")
            Me.columnSTA3 = MyBase.Columns("STA3")
            Me.columnSTA33 = MyBase.Columns("STA33")
            Me.columnRecomended_Fuel = MyBase.Columns("Recomended_Fuel")
            Me.columnExtra = MyBase.Columns("Extra")
            Me.columnCaptain_name = MyBase.Columns("Captain_name")
            Me.columnFirst_Off_name = MyBase.Columns("First_Off_name")
            Me.columnAdditional = MyBase.Columns("Additional")
            Me.columnAirhostess_name = MyBase.Columns("Airhostess_name")
            Me.columnAlternate_destination = MyBase.Columns("Alternate_destination")
            Me.columnDispatch_no = MyBase.Columns("Dispatch_no")
            Me.columnManager_no = MyBase.Columns("Manager_no")
            Me.columnWind = MyBase.Columns("Wind")
            Me.columnHumidity = MyBase.Columns("Humidity")
            Me.columnPressure = MyBase.Columns("Pressure")
            Me.columnDew = MyBase.Columns("Dew")
            Me.columnVisibility = MyBase.Columns("Visibility")
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFlight_no = New Global.System.Data.DataColumn("Flight_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_no)
            Me.columnFlight_date = New Global.System.Data.DataColumn("Flight_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_date)
            Me.columnReg_no = New Global.System.Data.DataColumn("Reg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_no)
            Me.columnBay_no = New Global.System.Data.DataColumn("Bay_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBay_no)
            Me.columnAircraft_type = New Global.System.Data.DataColumn("Aircraft_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAircraft_type)
            Me.columnEngine = New Global.System.Data.DataColumn("Engine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEngine)
            Me.columnMFrom = New Global.System.Data.DataColumn("MFrom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFrom)
            Me.columnTo1 = New Global.System.Data.DataColumn("To1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTo1)
            Me.columnSTD1 = New Global.System.Data.DataColumn("STD1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD1)
            Me.columnSTD11 = New Global.System.Data.DataColumn("STD11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD11)
            Me.columnSTA1 = New Global.System.Data.DataColumn("STA1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA1)
            Me.columnSTA11 = New Global.System.Data.DataColumn("STA11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA11)
            Me.columnMFrom2 = New Global.System.Data.DataColumn("MFrom2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFrom2)
            Me.columnTo2 = New Global.System.Data.DataColumn("To2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTo2)
            Me.columnSTD2 = New Global.System.Data.DataColumn("STD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD2)
            Me.columnSTD22 = New Global.System.Data.DataColumn("STD22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD22)
            Me.columnSTA2 = New Global.System.Data.DataColumn("STA2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA2)
            Me.columnSTA22 = New Global.System.Data.DataColumn("STA22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA22)
            Me.columnMFrom3 = New Global.System.Data.DataColumn("MFrom3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFrom3)
            Me.columnTo3 = New Global.System.Data.DataColumn("To3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTo3)
            Me.columnSTD3 = New Global.System.Data.DataColumn("STD3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD3)
            Me.columnSTD33 = New Global.System.Data.DataColumn("STD33", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD33)
            Me.columnSTA3 = New Global.System.Data.DataColumn("STA3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA3)
            Me.columnSTA33 = New Global.System.Data.DataColumn("STA33", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA33)
            Me.columnRecomended_Fuel = New Global.System.Data.DataColumn("Recomended_Fuel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecomended_Fuel)
            Me.columnExtra = New Global.System.Data.DataColumn("Extra", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtra)
            Me.columnCaptain_name = New Global.System.Data.DataColumn("Captain_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptain_name)
            Me.columnFirst_Off_name = New Global.System.Data.DataColumn("First_Off_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst_Off_name)
            Me.columnAdditional = New Global.System.Data.DataColumn("Additional", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdditional)
            Me.columnAirhostess_name = New Global.System.Data.DataColumn("Airhostess_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAirhostess_name)
            Me.columnAlternate_destination = New Global.System.Data.DataColumn("Alternate_destination", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlternate_destination)
            Me.columnDispatch_no = New Global.System.Data.DataColumn("Dispatch_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispatch_no)
            Me.columnManager_no = New Global.System.Data.DataColumn("Manager_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManager_no)
            Me.columnWind = New Global.System.Data.DataColumn("Wind", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWind)
            Me.columnHumidity = New Global.System.Data.DataColumn("Humidity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHumidity)
            Me.columnPressure = New Global.System.Data.DataColumn("Pressure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPressure)
            Me.columnDew = New Global.System.Data.DataColumn("Dew", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDew)
            Me.columnVisibility = New Global.System.Data.DataColumn("Visibility", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisibility)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnFlight_no.MaxLength = 50
            Me.columnFlight_date.MaxLength = 50
            Me.columnReg_no.MaxLength = 50
            Me.columnBay_no.MaxLength = 50
            Me.columnAircraft_type.MaxLength = 50
            Me.columnEngine.MaxLength = 50
            Me.columnMFrom.MaxLength = 50
            Me.columnTo1.MaxLength = 50
            Me.columnSTD1.MaxLength = 50
            Me.columnSTD11.MaxLength = 50
            Me.columnSTA1.MaxLength = 50
            Me.columnSTA11.MaxLength = 50
            Me.columnMFrom2.MaxLength = 50
            Me.columnTo2.MaxLength = 50
            Me.columnSTD2.MaxLength = 50
            Me.columnSTD22.MaxLength = 50
            Me.columnSTA2.MaxLength = 50
            Me.columnSTA22.MaxLength = 50
            Me.columnMFrom3.MaxLength = 50
            Me.columnTo3.MaxLength = 50
            Me.columnSTD3.MaxLength = 50
            Me.columnSTD33.MaxLength = 50
            Me.columnSTA3.MaxLength = 50
            Me.columnSTA33.MaxLength = 50
            Me.columnRecomended_Fuel.MaxLength = 50
            Me.columnExtra.MaxLength = 50
            Me.columnCaptain_name.MaxLength = 50
            Me.columnFirst_Off_name.MaxLength = 50
            Me.columnAdditional.MaxLength = 50
            Me.columnAirhostess_name.MaxLength = 50
            Me.columnAlternate_destination.MaxLength = 50
            Me.columnDispatch_no.MaxLength = 50
            Me.columnManager_no.MaxLength = 50
            Me.columnWind.MaxLength = 50
            Me.columnHumidity.MaxLength = 50
            Me.columnPressure.MaxLength = 50
            Me.columnDew.MaxLength = 50
            Me.columnVisibility.MaxLength = 50
            Me.columnType.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDBriefRow() As DBriefRow
            Return CType(Me.NewRow,DBriefRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DBriefRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DBriefRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DBriefRowChangedEvent) Is Nothing) Then
                RaiseEvent DBriefRowChanged(Me, New DBriefRowChangeEvent(CType(e.Row,DBriefRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DBriefRowChangingEvent) Is Nothing) Then
                RaiseEvent DBriefRowChanging(Me, New DBriefRowChangeEvent(CType(e.Row,DBriefRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DBriefRowDeletedEvent) Is Nothing) Then
                RaiseEvent DBriefRowDeleted(Me, New DBriefRowChangeEvent(CType(e.Row,DBriefRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DBriefRowDeletingEvent) Is Nothing) Then
                RaiseEvent DBriefRowDeleting(Me, New DBriefRowChangeEvent(CType(e.Row,DBriefRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDBriefRow(ByVal row As DBriefRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DBriefDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DesignationDataTable
        Inherits Global.System.Data.TypedTableBase(Of DesignationRow)
        
        Private columnDepartmentName As Global.System.Data.DataColumn
        
        Private columnDesignation As Global.System.Data.DataColumn
        
        Private columnSalary As Global.System.Data.DataColumn
        
        Private columnLeaves As Global.System.Data.DataColumn
        
        Private columnOTSalary As Global.System.Data.DataColumn
        
        Private columnDeductedSalary As Global.System.Data.DataColumn
        
        Private columnPF As Global.System.Data.DataColumn
        
        Private columnHRA As Global.System.Data.DataColumn
        
        Private columnDA As Global.System.Data.DataColumn
        
        Private columnTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Designation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartmentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartmentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesignationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LeavesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeaves
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OTSalaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOTSalary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeductedSalaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeductedSalary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DesignationRow
            Get
                Return CType(Me.Rows(index),DesignationRow)
            End Get
        End Property
        
        Public Event DesignationRowChanging As DesignationRowChangeEventHandler
        
        Public Event DesignationRowChanged As DesignationRowChangeEventHandler
        
        Public Event DesignationRowDeleting As DesignationRowChangeEventHandler
        
        Public Event DesignationRowDeleted As DesignationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDesignationRow(ByVal row As DesignationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDesignationRow(ByVal DepartmentName As String, ByVal Designation As String, ByVal Salary As String, ByVal Leaves As String, ByVal OTSalary As String, ByVal DeductedSalary As String, ByVal PF As String, ByVal HRA As String, ByVal DA As String, ByVal TA As String) As DesignationRow
            Dim rowDesignationRow As DesignationRow = CType(Me.NewRow,DesignationRow)
            Dim columnValuesArray() As Object = New Object() {DepartmentName, Designation, Salary, Leaves, OTSalary, DeductedSalary, PF, HRA, DA, TA}
            rowDesignationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDesignationRow)
            Return rowDesignationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DesignationDataTable = CType(MyBase.Clone,DesignationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DesignationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDepartmentName = MyBase.Columns("DepartmentName")
            Me.columnDesignation = MyBase.Columns("Designation")
            Me.columnSalary = MyBase.Columns("Salary")
            Me.columnLeaves = MyBase.Columns("Leaves")
            Me.columnOTSalary = MyBase.Columns("OTSalary")
            Me.columnDeductedSalary = MyBase.Columns("DeductedSalary")
            Me.columnPF = MyBase.Columns("PF")
            Me.columnHRA = MyBase.Columns("HRA")
            Me.columnDA = MyBase.Columns("DA")
            Me.columnTA = MyBase.Columns("TA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDepartmentName = New Global.System.Data.DataColumn("DepartmentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartmentName)
            Me.columnDesignation = New Global.System.Data.DataColumn("Designation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesignation)
            Me.columnSalary = New Global.System.Data.DataColumn("Salary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalary)
            Me.columnLeaves = New Global.System.Data.DataColumn("Leaves", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeaves)
            Me.columnOTSalary = New Global.System.Data.DataColumn("OTSalary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOTSalary)
            Me.columnDeductedSalary = New Global.System.Data.DataColumn("DeductedSalary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeductedSalary)
            Me.columnPF = New Global.System.Data.DataColumn("PF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPF)
            Me.columnHRA = New Global.System.Data.DataColumn("HRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHRA)
            Me.columnDA = New Global.System.Data.DataColumn("DA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDA)
            Me.columnTA = New Global.System.Data.DataColumn("TA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTA)
            Me.columnDepartmentName.MaxLength = 50
            Me.columnDesignation.MaxLength = 50
            Me.columnSalary.MaxLength = 50
            Me.columnLeaves.MaxLength = 50
            Me.columnOTSalary.MaxLength = 50
            Me.columnDeductedSalary.MaxLength = 50
            Me.columnPF.MaxLength = 50
            Me.columnHRA.MaxLength = 50
            Me.columnDA.MaxLength = 50
            Me.columnTA.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDesignationRow() As DesignationRow
            Return CType(Me.NewRow,DesignationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DesignationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DesignationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DesignationRowChangedEvent) Is Nothing) Then
                RaiseEvent DesignationRowChanged(Me, New DesignationRowChangeEvent(CType(e.Row,DesignationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DesignationRowChangingEvent) Is Nothing) Then
                RaiseEvent DesignationRowChanging(Me, New DesignationRowChangeEvent(CType(e.Row,DesignationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DesignationRowDeletedEvent) Is Nothing) Then
                RaiseEvent DesignationRowDeleted(Me, New DesignationRowChangeEvent(CType(e.Row,DesignationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DesignationRowDeletingEvent) Is Nothing) Then
                RaiseEvent DesignationRowDeleting(Me, New DesignationRowChangeEvent(CType(e.Row,DesignationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDesignationRow(ByVal row As DesignationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DesignationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Employee_entryDataTable
        Inherits Global.System.Data.TypedTableBase(Of Employee_entryRow)
        
        Private columnEmployee_id As Global.System.Data.DataColumn
        
        Private columnEmployee_last_name As Global.System.Data.DataColumn
        
        Private columnEmployee_first_name As Global.System.Data.DataColumn
        
        Private columnEmployee_middle_name As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnResidential_no As Global.System.Data.DataColumn
        
        Private columnMobile_no As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnEmail_id As Global.System.Data.DataColumn
        
        Private columnBlood_group As Global.System.Data.DataColumn
        
        Private columnQualification As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnDOJ As Global.System.Data.DataColumn
        
        Private columnDOL As Global.System.Data.DataColumn
        
        Private columnDesignation As Global.System.Data.DataColumn
        
        Private columnDepartment As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnGross_salary As Global.System.Data.DataColumn
        
        Private columnHRA As Global.System.Data.DataColumn
        
        Private columnDA As Global.System.Data.DataColumn
        
        Private columnTA As Global.System.Data.DataColumn
        
        Private columnPF As Global.System.Data.DataColumn
        
        Private columnPT As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Employee_entry"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Employee_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Employee_last_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_last_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Employee_first_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_first_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Employee_middle_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_middle_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Residential_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResidential_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mobile_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobile_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Email_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Blood_groupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBlood_group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOJColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesignationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Gross_salaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGross_salary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Employee_entryRow
            Get
                Return CType(Me.Rows(index),Employee_entryRow)
            End Get
        End Property
        
        Public Event Employee_entryRowChanging As Employee_entryRowChangeEventHandler
        
        Public Event Employee_entryRowChanged As Employee_entryRowChangeEventHandler
        
        Public Event Employee_entryRowDeleting As Employee_entryRowChangeEventHandler
        
        Public Event Employee_entryRowDeleted As Employee_entryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEmployee_entryRow(ByVal row As Employee_entryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEmployee_entryRow( _
                    ByVal Employee_id As String,  _
                    ByVal Employee_last_name As String,  _
                    ByVal Employee_first_name As String,  _
                    ByVal Employee_middle_name As String,  _
                    ByVal Address As String,  _
                    ByVal Residential_no As String,  _
                    ByVal Mobile_no As String,  _
                    ByVal Gender As String,  _
                    ByVal Email_id As String,  _
                    ByVal Blood_group As String,  _
                    ByVal Qualification As String,  _
                    ByVal DOB As String,  _
                    ByVal DOJ As String,  _
                    ByVal DOL As String,  _
                    ByVal Designation As String,  _
                    ByVal Department As String,  _
                    ByVal Status As String,  _
                    ByVal Gross_salary As String,  _
                    ByVal HRA As String,  _
                    ByVal DA As String,  _
                    ByVal TA As String,  _
                    ByVal PF As String,  _
                    ByVal PT As String,  _
                    ByVal Password As String) As Employee_entryRow
            Dim rowEmployee_entryRow As Employee_entryRow = CType(Me.NewRow,Employee_entryRow)
            Dim columnValuesArray() As Object = New Object() {Employee_id, Employee_last_name, Employee_first_name, Employee_middle_name, Address, Residential_no, Mobile_no, Gender, Email_id, Blood_group, Qualification, DOB, DOJ, DOL, Designation, Department, Status, Gross_salary, HRA, DA, TA, PF, PT, Password}
            rowEmployee_entryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEmployee_entryRow)
            Return rowEmployee_entryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Employee_entryDataTable = CType(MyBase.Clone,Employee_entryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Employee_entryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEmployee_id = MyBase.Columns("Employee_id")
            Me.columnEmployee_last_name = MyBase.Columns("Employee_last_name")
            Me.columnEmployee_first_name = MyBase.Columns("Employee_first_name")
            Me.columnEmployee_middle_name = MyBase.Columns("Employee_middle_name")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnResidential_no = MyBase.Columns("Residential_no")
            Me.columnMobile_no = MyBase.Columns("Mobile_no")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnEmail_id = MyBase.Columns("Email_id")
            Me.columnBlood_group = MyBase.Columns("Blood_group")
            Me.columnQualification = MyBase.Columns("Qualification")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnDOJ = MyBase.Columns("DOJ")
            Me.columnDOL = MyBase.Columns("DOL")
            Me.columnDesignation = MyBase.Columns("Designation")
            Me.columnDepartment = MyBase.Columns("Department")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnGross_salary = MyBase.Columns("Gross_salary")
            Me.columnHRA = MyBase.Columns("HRA")
            Me.columnDA = MyBase.Columns("DA")
            Me.columnTA = MyBase.Columns("TA")
            Me.columnPF = MyBase.Columns("PF")
            Me.columnPT = MyBase.Columns("PT")
            Me.columnPassword = MyBase.Columns("Password")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEmployee_id = New Global.System.Data.DataColumn("Employee_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_id)
            Me.columnEmployee_last_name = New Global.System.Data.DataColumn("Employee_last_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_last_name)
            Me.columnEmployee_first_name = New Global.System.Data.DataColumn("Employee_first_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_first_name)
            Me.columnEmployee_middle_name = New Global.System.Data.DataColumn("Employee_middle_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_middle_name)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnResidential_no = New Global.System.Data.DataColumn("Residential_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResidential_no)
            Me.columnMobile_no = New Global.System.Data.DataColumn("Mobile_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobile_no)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnEmail_id = New Global.System.Data.DataColumn("Email_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail_id)
            Me.columnBlood_group = New Global.System.Data.DataColumn("Blood_group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBlood_group)
            Me.columnQualification = New Global.System.Data.DataColumn("Qualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualification)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnDOJ = New Global.System.Data.DataColumn("DOJ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOJ)
            Me.columnDOL = New Global.System.Data.DataColumn("DOL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOL)
            Me.columnDesignation = New Global.System.Data.DataColumn("Designation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesignation)
            Me.columnDepartment = New Global.System.Data.DataColumn("Department", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartment)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnGross_salary = New Global.System.Data.DataColumn("Gross_salary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGross_salary)
            Me.columnHRA = New Global.System.Data.DataColumn("HRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHRA)
            Me.columnDA = New Global.System.Data.DataColumn("DA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDA)
            Me.columnTA = New Global.System.Data.DataColumn("TA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTA)
            Me.columnPF = New Global.System.Data.DataColumn("PF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPF)
            Me.columnPT = New Global.System.Data.DataColumn("PT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPT)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnEmployee_id.MaxLength = 50
            Me.columnEmployee_last_name.MaxLength = 50
            Me.columnEmployee_first_name.MaxLength = 50
            Me.columnEmployee_middle_name.MaxLength = 50
            Me.columnAddress.MaxLength = 50
            Me.columnResidential_no.MaxLength = 50
            Me.columnMobile_no.MaxLength = 50
            Me.columnGender.MaxLength = 50
            Me.columnEmail_id.MaxLength = 50
            Me.columnBlood_group.MaxLength = 50
            Me.columnQualification.MaxLength = 50
            Me.columnDOB.MaxLength = 50
            Me.columnDOJ.MaxLength = 50
            Me.columnDOL.MaxLength = 50
            Me.columnDesignation.MaxLength = 50
            Me.columnDepartment.MaxLength = 50
            Me.columnStatus.MaxLength = 50
            Me.columnGross_salary.MaxLength = 50
            Me.columnHRA.MaxLength = 50
            Me.columnDA.MaxLength = 50
            Me.columnTA.MaxLength = 50
            Me.columnPF.MaxLength = 50
            Me.columnPT.MaxLength = 50
            Me.columnPassword.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEmployee_entryRow() As Employee_entryRow
            Return CType(Me.NewRow,Employee_entryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Employee_entryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Employee_entryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Employee_entryRowChangedEvent) Is Nothing) Then
                RaiseEvent Employee_entryRowChanged(Me, New Employee_entryRowChangeEvent(CType(e.Row,Employee_entryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Employee_entryRowChangingEvent) Is Nothing) Then
                RaiseEvent Employee_entryRowChanging(Me, New Employee_entryRowChangeEvent(CType(e.Row,Employee_entryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Employee_entryRowDeletedEvent) Is Nothing) Then
                RaiseEvent Employee_entryRowDeleted(Me, New Employee_entryRowChangeEvent(CType(e.Row,Employee_entryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Employee_entryRowDeletingEvent) Is Nothing) Then
                RaiseEvent Employee_entryRowDeleting(Me, New Employee_entryRowChangeEvent(CType(e.Row,Employee_entryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEmployee_entryRow(ByVal row As Employee_entryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Employee_entryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EventDataTable
        Inherits Global.System.Data.TypedTableBase(Of EventRow)
        
        Private columnEvent_name As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnPlace As Global.System.Data.DataColumn
        
        Private columnTime As Global.System.Data.DataColumn
        
        Private columnDay As Global.System.Data.DataColumn
        
        Private columnOrg As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Event"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Event_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvent_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrgColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrg
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EventRow
            Get
                Return CType(Me.Rows(index),EventRow)
            End Get
        End Property
        
        Public Event EventRowChanging As EventRowChangeEventHandler
        
        Public Event EventRowChanged As EventRowChangeEventHandler
        
        Public Event EventRowDeleting As EventRowChangeEventHandler
        
        Public Event EventRowDeleted As EventRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEventRow(ByVal row As EventRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEventRow(ByVal Event_name As String, ByVal _Date As String, ByVal Place As String, ByVal Time As String, ByVal Day As String, ByVal Org As String, ByVal Description As String) As EventRow
            Dim rowEventRow As EventRow = CType(Me.NewRow,EventRow)
            Dim columnValuesArray() As Object = New Object() {Event_name, _Date, Place, Time, Day, Org, Description}
            rowEventRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEventRow)
            Return rowEventRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EventDataTable = CType(MyBase.Clone,EventDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EventDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEvent_name = MyBase.Columns("Event_name")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnPlace = MyBase.Columns("Place")
            Me.columnTime = MyBase.Columns("Time")
            Me.columnDay = MyBase.Columns("Day")
            Me.columnOrg = MyBase.Columns("Org")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEvent_name = New Global.System.Data.DataColumn("Event_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvent_name)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnPlace = New Global.System.Data.DataColumn("Place", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlace)
            Me.columnTime = New Global.System.Data.DataColumn("Time", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime)
            Me.columnDay = New Global.System.Data.DataColumn("Day", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDay)
            Me.columnOrg = New Global.System.Data.DataColumn("Org", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrg)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnEvent_name.AllowDBNull = false
            Me.columnEvent_name.MaxLength = 50
            Me.columnDate.AllowDBNull = false
            Me.columnDate.MaxLength = 50
            Me.columnPlace.AllowDBNull = false
            Me.columnPlace.MaxLength = 50
            Me.columnTime.AllowDBNull = false
            Me.columnTime.MaxLength = 50
            Me.columnDay.AllowDBNull = false
            Me.columnDay.MaxLength = 50
            Me.columnOrg.AllowDBNull = false
            Me.columnOrg.MaxLength = 50
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "EventRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "EventRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "EventRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "EventDataTable")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableEvent")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Event")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEventRow() As EventRow
            Return CType(Me.NewRow,EventRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EventRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EventRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EventRowChangedEvent) Is Nothing) Then
                RaiseEvent EventRowChanged(Me, New EventRowChangeEvent(CType(e.Row,EventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EventRowChangingEvent) Is Nothing) Then
                RaiseEvent EventRowChanging(Me, New EventRowChangeEvent(CType(e.Row,EventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EventRowDeletedEvent) Is Nothing) Then
                RaiseEvent EventRowDeleted(Me, New EventRowChangeEvent(CType(e.Row,EventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EventRowDeletingEvent) Is Nothing) Then
                RaiseEvent EventRowDeleting(Me, New EventRowChangeEvent(CType(e.Row,EventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEventRow(ByVal row As EventRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EventDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FleetDataTable
        Inherits Global.System.Data.TypedTableBase(Of FleetRow)
        
        Private columnAircraft_name As Global.System.Data.DataColumn
        
        Private columnNo_Of_Aircraft As Global.System.Data.DataColumn
        
        Private columnEngine_type As Global.System.Data.DataColumn
        
        Private columnCruise_speed As Global.System.Data.DataColumn
        
        Private _columnA_C_lenght As Global.System.Data.DataColumn
        
        Private columnWing_span As Global.System.Data.DataColumn
        
        Private columnFirst_class As Global.System.Data.DataColumn
        
        Private columnPremier_class As Global.System.Data.DataColumn
        
        Private columnEconomy_class As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Fleet"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Aircraft_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAircraft_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property No_Of_AircraftColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNo_Of_Aircraft
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Engine_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEngine_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cruise_speedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCruise_speed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _A_C_lenghtColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnA_C_lenght
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Wing_spanColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWing_span
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First_classColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst_class
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Premier_classColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPremier_class
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Economy_classColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEconomy_class
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FleetRow
            Get
                Return CType(Me.Rows(index),FleetRow)
            End Get
        End Property
        
        Public Event FleetRowChanging As FleetRowChangeEventHandler
        
        Public Event FleetRowChanged As FleetRowChangeEventHandler
        
        Public Event FleetRowDeleting As FleetRowChangeEventHandler
        
        Public Event FleetRowDeleted As FleetRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFleetRow(ByVal row As FleetRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFleetRow(ByVal Aircraft_name As String, ByVal No_Of_Aircraft As String, ByVal Engine_type As String, ByVal Cruise_speed As String, ByVal _A_C_lenght As String, ByVal Wing_span As String, ByVal First_class As String, ByVal Premier_class As String, ByVal Economy_class As String) As FleetRow
            Dim rowFleetRow As FleetRow = CType(Me.NewRow,FleetRow)
            Dim columnValuesArray() As Object = New Object() {Aircraft_name, No_Of_Aircraft, Engine_type, Cruise_speed, _A_C_lenght, Wing_span, First_class, Premier_class, Economy_class}
            rowFleetRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFleetRow)
            Return rowFleetRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FleetDataTable = CType(MyBase.Clone,FleetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FleetDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAircraft_name = MyBase.Columns("Aircraft_name")
            Me.columnNo_Of_Aircraft = MyBase.Columns("No_Of_Aircraft")
            Me.columnEngine_type = MyBase.Columns("Engine_type")
            Me.columnCruise_speed = MyBase.Columns("Cruise_speed")
            Me._columnA_C_lenght = MyBase.Columns("A/C_lenght")
            Me.columnWing_span = MyBase.Columns("Wing_span")
            Me.columnFirst_class = MyBase.Columns("First_class")
            Me.columnPremier_class = MyBase.Columns("Premier_class")
            Me.columnEconomy_class = MyBase.Columns("Economy_class")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAircraft_name = New Global.System.Data.DataColumn("Aircraft_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAircraft_name)
            Me.columnNo_Of_Aircraft = New Global.System.Data.DataColumn("No_Of_Aircraft", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNo_Of_Aircraft)
            Me.columnEngine_type = New Global.System.Data.DataColumn("Engine_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEngine_type)
            Me.columnCruise_speed = New Global.System.Data.DataColumn("Cruise_speed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCruise_speed)
            Me._columnA_C_lenght = New Global.System.Data.DataColumn("A/C_lenght", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnA_C_lenght.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnA_C_lenght")
            Me._columnA_C_lenght.ExtendedProperties.Add("Generator_UserColumnName", "A/C_lenght")
            MyBase.Columns.Add(Me._columnA_C_lenght)
            Me.columnWing_span = New Global.System.Data.DataColumn("Wing_span", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWing_span)
            Me.columnFirst_class = New Global.System.Data.DataColumn("First_class", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst_class)
            Me.columnPremier_class = New Global.System.Data.DataColumn("Premier_class", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPremier_class)
            Me.columnEconomy_class = New Global.System.Data.DataColumn("Economy_class", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEconomy_class)
            Me.columnAircraft_name.AllowDBNull = false
            Me.columnAircraft_name.MaxLength = 50
            Me.columnNo_Of_Aircraft.AllowDBNull = false
            Me.columnNo_Of_Aircraft.MaxLength = 50
            Me.columnEngine_type.AllowDBNull = false
            Me.columnEngine_type.MaxLength = 50
            Me.columnCruise_speed.AllowDBNull = false
            Me.columnCruise_speed.MaxLength = 50
            Me._columnA_C_lenght.AllowDBNull = false
            Me._columnA_C_lenght.MaxLength = 50
            Me.columnWing_span.AllowDBNull = false
            Me.columnWing_span.MaxLength = 50
            Me.columnFirst_class.AllowDBNull = false
            Me.columnFirst_class.MaxLength = 50
            Me.columnPremier_class.AllowDBNull = false
            Me.columnPremier_class.MaxLength = 50
            Me.columnEconomy_class.AllowDBNull = false
            Me.columnEconomy_class.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFleetRow() As FleetRow
            Return CType(Me.NewRow,FleetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FleetRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FleetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FleetRowChangedEvent) Is Nothing) Then
                RaiseEvent FleetRowChanged(Me, New FleetRowChangeEvent(CType(e.Row,FleetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FleetRowChangingEvent) Is Nothing) Then
                RaiseEvent FleetRowChanging(Me, New FleetRowChangeEvent(CType(e.Row,FleetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FleetRowDeletedEvent) Is Nothing) Then
                RaiseEvent FleetRowDeleted(Me, New FleetRowChangeEvent(CType(e.Row,FleetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FleetRowDeletingEvent) Is Nothing) Then
                RaiseEvent FleetRowDeleting(Me, New FleetRowChangeEvent(CType(e.Row,FleetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFleetRow(ByVal row As FleetRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FleetDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FlightDataTable
        Inherits Global.System.Data.TypedTableBase(Of FlightRow)
        
        Private columnFlight_no As Global.System.Data.DataColumn
        
        Private columnFlight_date As Global.System.Data.DataColumn
        
        Private columnReg_no As Global.System.Data.DataColumn
        
        Private columnBay_no As Global.System.Data.DataColumn
        
        Private columnLeg_no As Global.System.Data.DataColumn
        
        Private columnDI As Global.System.Data.DataColumn
        
        Private columnFrom As Global.System.Data.DataColumn
        
        Private columnTo As Global.System.Data.DataColumn
        
        Private columnAircraft_type As Global.System.Data.DataColumn
        
        Private columnOrg_sec As Global.System.Data.DataColumn
        
        Private columnFlight_type As Global.System.Data.DataColumn
        
        Private columnDep_Arr As Global.System.Data.DataColumn
        
        Private columnSTD_IST As Global.System.Data.DataColumn
        
        Private columnSTD_UTC As Global.System.Data.DataColumn
        
        Private columnATD_IST As Global.System.Data.DataColumn
        
        Private columnATD_UTC As Global.System.Data.DataColumn
        
        Private columnAON_IST As Global.System.Data.DataColumn
        
        Private columnAON_UTC As Global.System.Data.DataColumn
        
        Private columnAOF_IST As Global.System.Data.DataColumn
        
        Private columnAOF_UTC As Global.System.Data.DataColumn
        
        Private columnSTA_IST As Global.System.Data.DataColumn
        
        Private columnSTA_UTC As Global.System.Data.DataColumn
        
        Private columnATA_IST As Global.System.Data.DataColumn
        
        Private columnATA_UTC As Global.System.Data.DataColumn
        
        Private columnDep_Delay As Global.System.Data.DataColumn
        
        Private columnArr_Delay As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Flight"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bay_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBay_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Leg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Aircraft_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAircraft_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Org_secColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrg_sec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dep_ArrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep_Arr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATD_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATD_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATD_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATD_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AON_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAON_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AON_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAON_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AOF_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAOF_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AOF_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAOF_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATA_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATA_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATA_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATA_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dep_DelayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep_Delay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Arr_DelayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArr_Delay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FlightRow
            Get
                Return CType(Me.Rows(index),FlightRow)
            End Get
        End Property
        
        Public Event FlightRowChanging As FlightRowChangeEventHandler
        
        Public Event FlightRowChanged As FlightRowChangeEventHandler
        
        Public Event FlightRowDeleting As FlightRowChangeEventHandler
        
        Public Event FlightRowDeleted As FlightRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFlightRow(ByVal row As FlightRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFlightRow( _
                    ByVal Flight_no As String,  _
                    ByVal Flight_date As String,  _
                    ByVal Reg_no As String,  _
                    ByVal Bay_no As String,  _
                    ByVal Leg_no As String,  _
                    ByVal DI As String,  _
                    ByVal From As String,  _
                    ByVal _To As String,  _
                    ByVal Aircraft_type As String,  _
                    ByVal Org_sec As String,  _
                    ByVal Flight_type As String,  _
                    ByVal Dep_Arr As String,  _
                    ByVal STD_IST As String,  _
                    ByVal STD_UTC As String,  _
                    ByVal ATD_IST As String,  _
                    ByVal ATD_UTC As String,  _
                    ByVal AON_IST As String,  _
                    ByVal AON_UTC As String,  _
                    ByVal AOF_IST As String,  _
                    ByVal AOF_UTC As String,  _
                    ByVal STA_IST As String,  _
                    ByVal STA_UTC As String,  _
                    ByVal ATA_IST As String,  _
                    ByVal ATA_UTC As String,  _
                    ByVal Dep_Delay As String,  _
                    ByVal Arr_Delay As String) As FlightRow
            Dim rowFlightRow As FlightRow = CType(Me.NewRow,FlightRow)
            Dim columnValuesArray() As Object = New Object() {Flight_no, Flight_date, Reg_no, Bay_no, Leg_no, DI, From, _To, Aircraft_type, Org_sec, Flight_type, Dep_Arr, STD_IST, STD_UTC, ATD_IST, ATD_UTC, AON_IST, AON_UTC, AOF_IST, AOF_UTC, STA_IST, STA_UTC, ATA_IST, ATA_UTC, Dep_Delay, Arr_Delay}
            rowFlightRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFlightRow)
            Return rowFlightRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FlightDataTable = CType(MyBase.Clone,FlightDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FlightDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFlight_no = MyBase.Columns("Flight_no")
            Me.columnFlight_date = MyBase.Columns("Flight_date")
            Me.columnReg_no = MyBase.Columns("Reg_no")
            Me.columnBay_no = MyBase.Columns("Bay_no")
            Me.columnLeg_no = MyBase.Columns("Leg_no")
            Me.columnDI = MyBase.Columns("DI")
            Me.columnFrom = MyBase.Columns("From")
            Me.columnTo = MyBase.Columns("To")
            Me.columnAircraft_type = MyBase.Columns("Aircraft_type")
            Me.columnOrg_sec = MyBase.Columns("Org_sec")
            Me.columnFlight_type = MyBase.Columns("Flight_type")
            Me.columnDep_Arr = MyBase.Columns("Dep_Arr")
            Me.columnSTD_IST = MyBase.Columns("STD_IST")
            Me.columnSTD_UTC = MyBase.Columns("STD_UTC")
            Me.columnATD_IST = MyBase.Columns("ATD_IST")
            Me.columnATD_UTC = MyBase.Columns("ATD_UTC")
            Me.columnAON_IST = MyBase.Columns("AON_IST")
            Me.columnAON_UTC = MyBase.Columns("AON_UTC")
            Me.columnAOF_IST = MyBase.Columns("AOF_IST")
            Me.columnAOF_UTC = MyBase.Columns("AOF_UTC")
            Me.columnSTA_IST = MyBase.Columns("STA_IST")
            Me.columnSTA_UTC = MyBase.Columns("STA_UTC")
            Me.columnATA_IST = MyBase.Columns("ATA_IST")
            Me.columnATA_UTC = MyBase.Columns("ATA_UTC")
            Me.columnDep_Delay = MyBase.Columns("Dep_Delay")
            Me.columnArr_Delay = MyBase.Columns("Arr_Delay")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFlight_no = New Global.System.Data.DataColumn("Flight_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_no)
            Me.columnFlight_date = New Global.System.Data.DataColumn("Flight_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_date)
            Me.columnReg_no = New Global.System.Data.DataColumn("Reg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_no)
            Me.columnBay_no = New Global.System.Data.DataColumn("Bay_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBay_no)
            Me.columnLeg_no = New Global.System.Data.DataColumn("Leg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeg_no)
            Me.columnDI = New Global.System.Data.DataColumn("DI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI)
            Me.columnFrom = New Global.System.Data.DataColumn("From", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrom)
            Me.columnTo = New Global.System.Data.DataColumn("To", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnTo.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ToColumn")
            Me.columnTo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTo")
            Me.columnTo.ExtendedProperties.Add("Generator_UserColumnName", "To")
            MyBase.Columns.Add(Me.columnTo)
            Me.columnAircraft_type = New Global.System.Data.DataColumn("Aircraft_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAircraft_type)
            Me.columnOrg_sec = New Global.System.Data.DataColumn("Org_sec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrg_sec)
            Me.columnFlight_type = New Global.System.Data.DataColumn("Flight_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_type)
            Me.columnDep_Arr = New Global.System.Data.DataColumn("Dep_Arr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep_Arr)
            Me.columnSTD_IST = New Global.System.Data.DataColumn("STD_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD_IST)
            Me.columnSTD_UTC = New Global.System.Data.DataColumn("STD_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD_UTC)
            Me.columnATD_IST = New Global.System.Data.DataColumn("ATD_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATD_IST)
            Me.columnATD_UTC = New Global.System.Data.DataColumn("ATD_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATD_UTC)
            Me.columnAON_IST = New Global.System.Data.DataColumn("AON_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAON_IST)
            Me.columnAON_UTC = New Global.System.Data.DataColumn("AON_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAON_UTC)
            Me.columnAOF_IST = New Global.System.Data.DataColumn("AOF_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAOF_IST)
            Me.columnAOF_UTC = New Global.System.Data.DataColumn("AOF_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAOF_UTC)
            Me.columnSTA_IST = New Global.System.Data.DataColumn("STA_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA_IST)
            Me.columnSTA_UTC = New Global.System.Data.DataColumn("STA_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA_UTC)
            Me.columnATA_IST = New Global.System.Data.DataColumn("ATA_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATA_IST)
            Me.columnATA_UTC = New Global.System.Data.DataColumn("ATA_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATA_UTC)
            Me.columnDep_Delay = New Global.System.Data.DataColumn("Dep_Delay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep_Delay)
            Me.columnArr_Delay = New Global.System.Data.DataColumn("Arr_Delay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArr_Delay)
            Me.columnFlight_no.AllowDBNull = false
            Me.columnFlight_no.MaxLength = 50
            Me.columnFlight_date.AllowDBNull = false
            Me.columnFlight_date.MaxLength = 50
            Me.columnReg_no.AllowDBNull = false
            Me.columnReg_no.MaxLength = 50
            Me.columnBay_no.AllowDBNull = false
            Me.columnBay_no.MaxLength = 50
            Me.columnLeg_no.AllowDBNull = false
            Me.columnLeg_no.MaxLength = 50
            Me.columnDI.AllowDBNull = false
            Me.columnDI.MaxLength = 50
            Me.columnFrom.AllowDBNull = false
            Me.columnFrom.MaxLength = 50
            Me.columnTo.AllowDBNull = false
            Me.columnTo.MaxLength = 50
            Me.columnAircraft_type.AllowDBNull = false
            Me.columnAircraft_type.MaxLength = 50
            Me.columnOrg_sec.AllowDBNull = false
            Me.columnOrg_sec.MaxLength = 50
            Me.columnFlight_type.AllowDBNull = false
            Me.columnFlight_type.MaxLength = 50
            Me.columnDep_Arr.AllowDBNull = false
            Me.columnDep_Arr.MaxLength = 50
            Me.columnSTD_IST.AllowDBNull = false
            Me.columnSTD_IST.MaxLength = 50
            Me.columnSTD_UTC.AllowDBNull = false
            Me.columnSTD_UTC.MaxLength = 50
            Me.columnATD_IST.AllowDBNull = false
            Me.columnATD_IST.MaxLength = 50
            Me.columnATD_UTC.AllowDBNull = false
            Me.columnATD_UTC.MaxLength = 50
            Me.columnAON_IST.AllowDBNull = false
            Me.columnAON_IST.MaxLength = 50
            Me.columnAON_UTC.AllowDBNull = false
            Me.columnAON_UTC.MaxLength = 50
            Me.columnAOF_IST.AllowDBNull = false
            Me.columnAOF_IST.MaxLength = 50
            Me.columnAOF_UTC.AllowDBNull = false
            Me.columnAOF_UTC.MaxLength = 50
            Me.columnSTA_IST.AllowDBNull = false
            Me.columnSTA_IST.MaxLength = 50
            Me.columnSTA_UTC.AllowDBNull = false
            Me.columnSTA_UTC.MaxLength = 50
            Me.columnATA_IST.AllowDBNull = false
            Me.columnATA_IST.MaxLength = 50
            Me.columnATA_UTC.AllowDBNull = false
            Me.columnATA_UTC.MaxLength = 50
            Me.columnDep_Delay.AllowDBNull = false
            Me.columnDep_Delay.MaxLength = 50
            Me.columnArr_Delay.AllowDBNull = false
            Me.columnArr_Delay.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFlightRow() As FlightRow
            Return CType(Me.NewRow,FlightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FlightRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FlightRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FlightRowChangedEvent) Is Nothing) Then
                RaiseEvent FlightRowChanged(Me, New FlightRowChangeEvent(CType(e.Row,FlightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FlightRowChangingEvent) Is Nothing) Then
                RaiseEvent FlightRowChanging(Me, New FlightRowChangeEvent(CType(e.Row,FlightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FlightRowDeletedEvent) Is Nothing) Then
                RaiseEvent FlightRowDeleted(Me, New FlightRowChangeEvent(CType(e.Row,FlightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FlightRowDeletingEvent) Is Nothing) Then
                RaiseEvent FlightRowDeleting(Me, New FlightRowChangeEvent(CType(e.Row,FlightRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFlightRow(ByVal row As FlightRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FlightDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FlightscheduleDataTable
        Inherits Global.System.Data.TypedTableBase(Of FlightscheduleRow)
        
        Private columnFlight_no As Global.System.Data.DataColumn
        
        Private columnFlight_date As Global.System.Data.DataColumn
        
        Private columnReg_no As Global.System.Data.DataColumn
        
        Private columnBay_no As Global.System.Data.DataColumn
        
        Private columnLeg_no As Global.System.Data.DataColumn
        
        Private columnAircraft_type As Global.System.Data.DataColumn
        
        Private columnFlight_type As Global.System.Data.DataColumn
        
        Private columnDI As Global.System.Data.DataColumn
        
        Private columnFrom1 As Global.System.Data.DataColumn
        
        Private columnTo1 As Global.System.Data.DataColumn
        
        Private columnSTD_IST As Global.System.Data.DataColumn
        
        Private columnSTD_UTC As Global.System.Data.DataColumn
        
        Private columnSTA_IST As Global.System.Data.DataColumn
        
        Private columnSTA_UTC As Global.System.Data.DataColumn
        
        Private columnCaptain_name As Global.System.Data.DataColumn
        
        Private columnFirst_off_name As Global.System.Data.DataColumn
        
        Private columnAirhostess_name As Global.System.Data.DataColumn
        
        Private columnDep_Arr As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Flightschedule"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bay_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBay_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Leg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Aircraft_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAircraft_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property From1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property To1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STD_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTD_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STA_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTA_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Captain_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaptain_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First_off_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst_off_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Airhostess_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAirhostess_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dep_ArrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep_Arr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FlightscheduleRow
            Get
                Return CType(Me.Rows(index),FlightscheduleRow)
            End Get
        End Property
        
        Public Event FlightscheduleRowChanging As FlightscheduleRowChangeEventHandler
        
        Public Event FlightscheduleRowChanged As FlightscheduleRowChangeEventHandler
        
        Public Event FlightscheduleRowDeleting As FlightscheduleRowChangeEventHandler
        
        Public Event FlightscheduleRowDeleted As FlightscheduleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFlightscheduleRow(ByVal row As FlightscheduleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFlightscheduleRow( _
                    ByVal Flight_no As String,  _
                    ByVal Flight_date As String,  _
                    ByVal Reg_no As String,  _
                    ByVal Bay_no As String,  _
                    ByVal Leg_no As String,  _
                    ByVal Aircraft_type As String,  _
                    ByVal Flight_type As String,  _
                    ByVal DI As String,  _
                    ByVal From1 As String,  _
                    ByVal To1 As String,  _
                    ByVal STD_IST As String,  _
                    ByVal STD_UTC As String,  _
                    ByVal STA_IST As String,  _
                    ByVal STA_UTC As String,  _
                    ByVal Captain_name As String,  _
                    ByVal First_off_name As String,  _
                    ByVal Airhostess_name As String,  _
                    ByVal Dep_Arr As String) As FlightscheduleRow
            Dim rowFlightscheduleRow As FlightscheduleRow = CType(Me.NewRow,FlightscheduleRow)
            Dim columnValuesArray() As Object = New Object() {Flight_no, Flight_date, Reg_no, Bay_no, Leg_no, Aircraft_type, Flight_type, DI, From1, To1, STD_IST, STD_UTC, STA_IST, STA_UTC, Captain_name, First_off_name, Airhostess_name, Dep_Arr}
            rowFlightscheduleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFlightscheduleRow)
            Return rowFlightscheduleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FlightscheduleDataTable = CType(MyBase.Clone,FlightscheduleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FlightscheduleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFlight_no = MyBase.Columns("Flight_no")
            Me.columnFlight_date = MyBase.Columns("Flight_date")
            Me.columnReg_no = MyBase.Columns("Reg_no")
            Me.columnBay_no = MyBase.Columns("Bay_no")
            Me.columnLeg_no = MyBase.Columns("Leg_no")
            Me.columnAircraft_type = MyBase.Columns("Aircraft_type")
            Me.columnFlight_type = MyBase.Columns("Flight_type")
            Me.columnDI = MyBase.Columns("DI")
            Me.columnFrom1 = MyBase.Columns("From1")
            Me.columnTo1 = MyBase.Columns("To1")
            Me.columnSTD_IST = MyBase.Columns("STD_IST")
            Me.columnSTD_UTC = MyBase.Columns("STD_UTC")
            Me.columnSTA_IST = MyBase.Columns("STA_IST")
            Me.columnSTA_UTC = MyBase.Columns("STA_UTC")
            Me.columnCaptain_name = MyBase.Columns("Captain_name")
            Me.columnFirst_off_name = MyBase.Columns("First_off_name")
            Me.columnAirhostess_name = MyBase.Columns("Airhostess_name")
            Me.columnDep_Arr = MyBase.Columns("Dep_Arr")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFlight_no = New Global.System.Data.DataColumn("Flight_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_no)
            Me.columnFlight_date = New Global.System.Data.DataColumn("Flight_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_date)
            Me.columnReg_no = New Global.System.Data.DataColumn("Reg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_no)
            Me.columnBay_no = New Global.System.Data.DataColumn("Bay_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBay_no)
            Me.columnLeg_no = New Global.System.Data.DataColumn("Leg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeg_no)
            Me.columnAircraft_type = New Global.System.Data.DataColumn("Aircraft_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAircraft_type)
            Me.columnFlight_type = New Global.System.Data.DataColumn("Flight_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_type)
            Me.columnDI = New Global.System.Data.DataColumn("DI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI)
            Me.columnFrom1 = New Global.System.Data.DataColumn("From1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrom1)
            Me.columnTo1 = New Global.System.Data.DataColumn("To1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTo1)
            Me.columnSTD_IST = New Global.System.Data.DataColumn("STD_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD_IST)
            Me.columnSTD_UTC = New Global.System.Data.DataColumn("STD_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTD_UTC)
            Me.columnSTA_IST = New Global.System.Data.DataColumn("STA_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA_IST)
            Me.columnSTA_UTC = New Global.System.Data.DataColumn("STA_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTA_UTC)
            Me.columnCaptain_name = New Global.System.Data.DataColumn("Captain_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaptain_name)
            Me.columnFirst_off_name = New Global.System.Data.DataColumn("First_off_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst_off_name)
            Me.columnAirhostess_name = New Global.System.Data.DataColumn("Airhostess_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAirhostess_name)
            Me.columnDep_Arr = New Global.System.Data.DataColumn("Dep_Arr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep_Arr)
            Me.columnFlight_no.AllowDBNull = false
            Me.columnFlight_no.MaxLength = 50
            Me.columnFlight_date.AllowDBNull = false
            Me.columnFlight_date.MaxLength = 50
            Me.columnReg_no.AllowDBNull = false
            Me.columnReg_no.MaxLength = 50
            Me.columnBay_no.AllowDBNull = false
            Me.columnBay_no.MaxLength = 50
            Me.columnLeg_no.AllowDBNull = false
            Me.columnLeg_no.MaxLength = 50
            Me.columnAircraft_type.AllowDBNull = false
            Me.columnAircraft_type.MaxLength = 50
            Me.columnFlight_type.AllowDBNull = false
            Me.columnFlight_type.MaxLength = 50
            Me.columnDI.AllowDBNull = false
            Me.columnDI.MaxLength = 50
            Me.columnFrom1.AllowDBNull = false
            Me.columnFrom1.MaxLength = 50
            Me.columnTo1.AllowDBNull = false
            Me.columnTo1.MaxLength = 50
            Me.columnSTD_IST.AllowDBNull = false
            Me.columnSTD_IST.MaxLength = 50
            Me.columnSTD_UTC.AllowDBNull = false
            Me.columnSTD_UTC.MaxLength = 50
            Me.columnSTA_IST.AllowDBNull = false
            Me.columnSTA_IST.MaxLength = 50
            Me.columnSTA_UTC.AllowDBNull = false
            Me.columnSTA_UTC.MaxLength = 50
            Me.columnCaptain_name.AllowDBNull = false
            Me.columnCaptain_name.MaxLength = 50
            Me.columnFirst_off_name.AllowDBNull = false
            Me.columnFirst_off_name.MaxLength = 50
            Me.columnAirhostess_name.AllowDBNull = false
            Me.columnAirhostess_name.MaxLength = 50
            Me.columnDep_Arr.AllowDBNull = false
            Me.columnDep_Arr.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFlightscheduleRow() As FlightscheduleRow
            Return CType(Me.NewRow,FlightscheduleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FlightscheduleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FlightscheduleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FlightscheduleRowChangedEvent) Is Nothing) Then
                RaiseEvent FlightscheduleRowChanged(Me, New FlightscheduleRowChangeEvent(CType(e.Row,FlightscheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FlightscheduleRowChangingEvent) Is Nothing) Then
                RaiseEvent FlightscheduleRowChanging(Me, New FlightscheduleRowChangeEvent(CType(e.Row,FlightscheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FlightscheduleRowDeletedEvent) Is Nothing) Then
                RaiseEvent FlightscheduleRowDeleted(Me, New FlightscheduleRowChangeEvent(CType(e.Row,FlightscheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FlightscheduleRowDeletingEvent) Is Nothing) Then
                RaiseEvent FlightscheduleRowDeleting(Me, New FlightscheduleRowChangeEvent(CType(e.Row,FlightscheduleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFlightscheduleRow(ByVal row As FlightscheduleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FlightscheduleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FuelManagementDataTable
        Inherits Global.System.Data.TypedTableBase(Of FuelManagementRow)
        
        Private columnFlight_no As Global.System.Data.DataColumn
        
        Private columnFlight_date As Global.System.Data.DataColumn
        
        Private columnReg_no As Global.System.Data.DataColumn
        
        Private columnBay_no As Global.System.Data.DataColumn
        
        Private columnFrom1 As Global.System.Data.DataColumn
        
        Private columnTo1 As Global.System.Data.DataColumn
        
        Private columnOil_Company As Global.System.Data.DataColumn
        
        Private columnDepTime_IST As Global.System.Data.DataColumn
        
        Private columnDepTime_UTC As Global.System.Data.DataColumn
        
        Private columnDep_Fuel As Global.System.Data.DataColumn
        
        Private columnBurn_fuel As Global.System.Data.DataColumn
        
        Private columnArr_IST As Global.System.Data.DataColumn
        
        Private columnArr_UTC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FuelManagement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Reg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bay_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBay_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property From1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrom1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property To1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Oil_CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOil_Company
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepTime_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepTime_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepTime_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepTime_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Dep_FuelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDep_Fuel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Burn_fuelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBurn_fuel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Arr_ISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArr_IST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Arr_UTCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArr_UTC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FuelManagementRow
            Get
                Return CType(Me.Rows(index),FuelManagementRow)
            End Get
        End Property
        
        Public Event FuelManagementRowChanging As FuelManagementRowChangeEventHandler
        
        Public Event FuelManagementRowChanged As FuelManagementRowChangeEventHandler
        
        Public Event FuelManagementRowDeleting As FuelManagementRowChangeEventHandler
        
        Public Event FuelManagementRowDeleted As FuelManagementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFuelManagementRow(ByVal row As FuelManagementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFuelManagementRow(ByVal Flight_no As String, ByVal Flight_date As String, ByVal Reg_no As String, ByVal Bay_no As String, ByVal From1 As String, ByVal To1 As String, ByVal Oil_Company As String, ByVal DepTime_IST As String, ByVal DepTime_UTC As String, ByVal Dep_Fuel As String, ByVal Burn_fuel As String, ByVal Arr_IST As String, ByVal Arr_UTC As String) As FuelManagementRow
            Dim rowFuelManagementRow As FuelManagementRow = CType(Me.NewRow,FuelManagementRow)
            Dim columnValuesArray() As Object = New Object() {Flight_no, Flight_date, Reg_no, Bay_no, From1, To1, Oil_Company, DepTime_IST, DepTime_UTC, Dep_Fuel, Burn_fuel, Arr_IST, Arr_UTC}
            rowFuelManagementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFuelManagementRow)
            Return rowFuelManagementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FuelManagementDataTable = CType(MyBase.Clone,FuelManagementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FuelManagementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFlight_no = MyBase.Columns("Flight_no")
            Me.columnFlight_date = MyBase.Columns("Flight_date")
            Me.columnReg_no = MyBase.Columns("Reg_no")
            Me.columnBay_no = MyBase.Columns("Bay_no")
            Me.columnFrom1 = MyBase.Columns("From1")
            Me.columnTo1 = MyBase.Columns("To1")
            Me.columnOil_Company = MyBase.Columns("Oil_Company")
            Me.columnDepTime_IST = MyBase.Columns("DepTime_IST")
            Me.columnDepTime_UTC = MyBase.Columns("DepTime_UTC")
            Me.columnDep_Fuel = MyBase.Columns("Dep_Fuel")
            Me.columnBurn_fuel = MyBase.Columns("Burn_fuel")
            Me.columnArr_IST = MyBase.Columns("Arr_IST")
            Me.columnArr_UTC = MyBase.Columns("Arr_UTC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFlight_no = New Global.System.Data.DataColumn("Flight_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_no)
            Me.columnFlight_date = New Global.System.Data.DataColumn("Flight_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_date)
            Me.columnReg_no = New Global.System.Data.DataColumn("Reg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReg_no)
            Me.columnBay_no = New Global.System.Data.DataColumn("Bay_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBay_no)
            Me.columnFrom1 = New Global.System.Data.DataColumn("From1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrom1)
            Me.columnTo1 = New Global.System.Data.DataColumn("To1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTo1)
            Me.columnOil_Company = New Global.System.Data.DataColumn("Oil_Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOil_Company)
            Me.columnDepTime_IST = New Global.System.Data.DataColumn("DepTime_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepTime_IST)
            Me.columnDepTime_UTC = New Global.System.Data.DataColumn("DepTime_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepTime_UTC)
            Me.columnDep_Fuel = New Global.System.Data.DataColumn("Dep_Fuel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDep_Fuel)
            Me.columnBurn_fuel = New Global.System.Data.DataColumn("Burn_fuel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBurn_fuel)
            Me.columnArr_IST = New Global.System.Data.DataColumn("Arr_IST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArr_IST)
            Me.columnArr_UTC = New Global.System.Data.DataColumn("Arr_UTC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArr_UTC)
            Me.columnFlight_no.AllowDBNull = false
            Me.columnFlight_no.MaxLength = 50
            Me.columnFlight_date.AllowDBNull = false
            Me.columnFlight_date.MaxLength = 50
            Me.columnReg_no.AllowDBNull = false
            Me.columnReg_no.MaxLength = 50
            Me.columnBay_no.AllowDBNull = false
            Me.columnBay_no.MaxLength = 50
            Me.columnFrom1.AllowDBNull = false
            Me.columnFrom1.MaxLength = 50
            Me.columnTo1.AllowDBNull = false
            Me.columnTo1.MaxLength = 50
            Me.columnOil_Company.AllowDBNull = false
            Me.columnOil_Company.MaxLength = 50
            Me.columnDepTime_IST.AllowDBNull = false
            Me.columnDepTime_IST.MaxLength = 50
            Me.columnDepTime_UTC.AllowDBNull = false
            Me.columnDepTime_UTC.MaxLength = 50
            Me.columnDep_Fuel.AllowDBNull = false
            Me.columnDep_Fuel.MaxLength = 50
            Me.columnBurn_fuel.AllowDBNull = false
            Me.columnBurn_fuel.MaxLength = 50
            Me.columnArr_IST.AllowDBNull = false
            Me.columnArr_IST.MaxLength = 50
            Me.columnArr_UTC.AllowDBNull = false
            Me.columnArr_UTC.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFuelManagementRow() As FuelManagementRow
            Return CType(Me.NewRow,FuelManagementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FuelManagementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FuelManagementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FuelManagementRowChangedEvent) Is Nothing) Then
                RaiseEvent FuelManagementRowChanged(Me, New FuelManagementRowChangeEvent(CType(e.Row,FuelManagementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FuelManagementRowChangingEvent) Is Nothing) Then
                RaiseEvent FuelManagementRowChanging(Me, New FuelManagementRowChangeEvent(CType(e.Row,FuelManagementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FuelManagementRowDeletedEvent) Is Nothing) Then
                RaiseEvent FuelManagementRowDeleted(Me, New FuelManagementRowChangeEvent(CType(e.Row,FuelManagementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FuelManagementRowDeletingEvent) Is Nothing) Then
                RaiseEvent FuelManagementRowDeleting(Me, New FuelManagementRowChangeEvent(CType(e.Row,FuelManagementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFuelManagementRow(ByVal row As FuelManagementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FuelManagementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LogintableDataTable
        Inherits Global.System.Data.TypedTableBase(Of LogintableRow)
        
        Private columnUser_id As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnDepartment As Global.System.Data.DataColumn
        
        Private columnDesignation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Logintable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property User_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUser_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DesignationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesignation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LogintableRow
            Get
                Return CType(Me.Rows(index),LogintableRow)
            End Get
        End Property
        
        Public Event LogintableRowChanging As LogintableRowChangeEventHandler
        
        Public Event LogintableRowChanged As LogintableRowChangeEventHandler
        
        Public Event LogintableRowDeleting As LogintableRowChangeEventHandler
        
        Public Event LogintableRowDeleted As LogintableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLogintableRow(ByVal row As LogintableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLogintableRow(ByVal User_id As String, ByVal Password As String, ByVal Department As String, ByVal Designation As String) As LogintableRow
            Dim rowLogintableRow As LogintableRow = CType(Me.NewRow,LogintableRow)
            Dim columnValuesArray() As Object = New Object() {User_id, Password, Department, Designation}
            rowLogintableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLogintableRow)
            Return rowLogintableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LogintableDataTable = CType(MyBase.Clone,LogintableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LogintableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUser_id = MyBase.Columns("User_id")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnDepartment = MyBase.Columns("Department")
            Me.columnDesignation = MyBase.Columns("Designation")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUser_id = New Global.System.Data.DataColumn("User_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUser_id)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnDepartment = New Global.System.Data.DataColumn("Department", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartment)
            Me.columnDesignation = New Global.System.Data.DataColumn("Designation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesignation)
            Me.columnUser_id.AllowDBNull = false
            Me.columnUser_id.MaxLength = 50
            Me.columnPassword.AllowDBNull = false
            Me.columnPassword.MaxLength = 50
            Me.columnDepartment.MaxLength = 50
            Me.columnDesignation.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLogintableRow() As LogintableRow
            Return CType(Me.NewRow,LogintableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LogintableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LogintableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LogintableRowChangedEvent) Is Nothing) Then
                RaiseEvent LogintableRowChanged(Me, New LogintableRowChangeEvent(CType(e.Row,LogintableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LogintableRowChangingEvent) Is Nothing) Then
                RaiseEvent LogintableRowChanging(Me, New LogintableRowChangeEvent(CType(e.Row,LogintableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LogintableRowDeletedEvent) Is Nothing) Then
                RaiseEvent LogintableRowDeleted(Me, New LogintableRowChangeEvent(CType(e.Row,LogintableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LogintableRowDeletingEvent) Is Nothing) Then
                RaiseEvent LogintableRowDeleting(Me, New LogintableRowChangeEvent(CType(e.Row,LogintableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLogintableRow(ByVal row As LogintableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LogintableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PassengersDataTable
        Inherits Global.System.Data.TypedTableBase(Of PassengersRow)
        
        Private columnFlight_no As Global.System.Data.DataColumn
        
        Private columnFlight_date As Global.System.Data.DataColumn
        
        Private columnFrom As Global.System.Data.DataColumn
        
        Private columnTo As Global.System.Data.DataColumn
        
        Private columnLeg_no As Global.System.Data.DataColumn
        
        Private columnFirst1 As Global.System.Data.DataColumn
        
        Private columnFirst2 As Global.System.Data.DataColumn
        
        Private columnPremier1 As Global.System.Data.DataColumn
        
        Private columnpremier2 As Global.System.Data.DataColumn
        
        Private columnEco1 As Global.System.Data.DataColumn
        
        Private columnEco2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Passengers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flight_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlight_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Leg_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeg_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property First2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirst2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Premier1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPremier1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property premier2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnpremier2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Eco1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEco1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Eco2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEco2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PassengersRow
            Get
                Return CType(Me.Rows(index),PassengersRow)
            End Get
        End Property
        
        Public Event PassengersRowChanging As PassengersRowChangeEventHandler
        
        Public Event PassengersRowChanged As PassengersRowChangeEventHandler
        
        Public Event PassengersRowDeleting As PassengersRowChangeEventHandler
        
        Public Event PassengersRowDeleted As PassengersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPassengersRow(ByVal row As PassengersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPassengersRow(ByVal Flight_no As String, ByVal Flight_date As String, ByVal From As String, ByVal _To As String, ByVal Leg_no As String, ByVal First1 As String, ByVal First2 As String, ByVal Premier1 As String, ByVal premier2 As String, ByVal Eco1 As String, ByVal Eco2 As String) As PassengersRow
            Dim rowPassengersRow As PassengersRow = CType(Me.NewRow,PassengersRow)
            Dim columnValuesArray() As Object = New Object() {Flight_no, Flight_date, From, _To, Leg_no, First1, First2, Premier1, premier2, Eco1, Eco2}
            rowPassengersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPassengersRow)
            Return rowPassengersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PassengersDataTable = CType(MyBase.Clone,PassengersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PassengersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFlight_no = MyBase.Columns("Flight_no")
            Me.columnFlight_date = MyBase.Columns("Flight_date")
            Me.columnFrom = MyBase.Columns("From")
            Me.columnTo = MyBase.Columns("To")
            Me.columnLeg_no = MyBase.Columns("Leg_no")
            Me.columnFirst1 = MyBase.Columns("First1")
            Me.columnFirst2 = MyBase.Columns("First2")
            Me.columnPremier1 = MyBase.Columns("Premier1")
            Me.columnpremier2 = MyBase.Columns("premier2")
            Me.columnEco1 = MyBase.Columns("Eco1")
            Me.columnEco2 = MyBase.Columns("Eco2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFlight_no = New Global.System.Data.DataColumn("Flight_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_no)
            Me.columnFlight_date = New Global.System.Data.DataColumn("Flight_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlight_date)
            Me.columnFrom = New Global.System.Data.DataColumn("From", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrom)
            Me.columnTo = New Global.System.Data.DataColumn("To", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnTo.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ToColumn")
            Me.columnTo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTo")
            Me.columnTo.ExtendedProperties.Add("Generator_UserColumnName", "To")
            MyBase.Columns.Add(Me.columnTo)
            Me.columnLeg_no = New Global.System.Data.DataColumn("Leg_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeg_no)
            Me.columnFirst1 = New Global.System.Data.DataColumn("First1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst1)
            Me.columnFirst2 = New Global.System.Data.DataColumn("First2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirst2)
            Me.columnPremier1 = New Global.System.Data.DataColumn("Premier1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPremier1)
            Me.columnpremier2 = New Global.System.Data.DataColumn("premier2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpremier2)
            Me.columnEco1 = New Global.System.Data.DataColumn("Eco1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEco1)
            Me.columnEco2 = New Global.System.Data.DataColumn("Eco2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEco2)
            Me.columnFlight_no.AllowDBNull = false
            Me.columnFlight_no.MaxLength = 50
            Me.columnFlight_date.AllowDBNull = false
            Me.columnFlight_date.MaxLength = 50
            Me.columnFrom.AllowDBNull = false
            Me.columnFrom.MaxLength = 50
            Me.columnTo.AllowDBNull = false
            Me.columnTo.MaxLength = 50
            Me.columnLeg_no.AllowDBNull = false
            Me.columnLeg_no.MaxLength = 50
            Me.columnFirst1.AllowDBNull = false
            Me.columnFirst1.MaxLength = 50
            Me.columnFirst2.AllowDBNull = false
            Me.columnFirst2.MaxLength = 50
            Me.columnPremier1.AllowDBNull = false
            Me.columnPremier1.MaxLength = 50
            Me.columnpremier2.AllowDBNull = false
            Me.columnpremier2.MaxLength = 50
            Me.columnEco1.AllowDBNull = false
            Me.columnEco1.MaxLength = 50
            Me.columnEco2.AllowDBNull = false
            Me.columnEco2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPassengersRow() As PassengersRow
            Return CType(Me.NewRow,PassengersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PassengersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PassengersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PassengersRowChangedEvent) Is Nothing) Then
                RaiseEvent PassengersRowChanged(Me, New PassengersRowChangeEvent(CType(e.Row,PassengersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PassengersRowChangingEvent) Is Nothing) Then
                RaiseEvent PassengersRowChanging(Me, New PassengersRowChangeEvent(CType(e.Row,PassengersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PassengersRowDeletedEvent) Is Nothing) Then
                RaiseEvent PassengersRowDeleted(Me, New PassengersRowChangeEvent(CType(e.Row,PassengersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PassengersRowDeletingEvent) Is Nothing) Then
                RaiseEvent PassengersRowDeleting(Me, New PassengersRowChangeEvent(CType(e.Row,PassengersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePassengersRow(ByVal row As PassengersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PassengersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PaySlipDataTable
        Inherits Global.System.Data.TypedTableBase(Of PaySlipRow)
        
        Private columnEmployeeNo As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnChequeNo As Global.System.Data.DataColumn
        
        Private columnDepartment As Global.System.Data.DataColumn
        
        Private columnHRA As Global.System.Data.DataColumn
        
        Private columnDA As Global.System.Data.DataColumn
        
        Private columnTA As Global.System.Data.DataColumn
        
        Private columnSalaryduringOT As Global.System.Data.DataColumn
        
        Private columnAllowance As Global.System.Data.DataColumn
        
        Private columnPF As Global.System.Data.DataColumn
        
        Private columnIncrement As Global.System.Data.DataColumn
        
        Private columnSalaryDeductedForLeaves As Global.System.Data.DataColumn
        
        Private columnIncometax As Global.System.Data.DataColumn
        
        Private columnDeduction As Global.System.Data.DataColumn
        
        Private columnNetSalary As Global.System.Data.DataColumn
        
        Private columnPT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PaySlip"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmployeeNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployeeNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChequeNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChequeNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalaryduringOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalaryduringOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AllowanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAllowance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncrementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncrement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalaryDeductedForLeavesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalaryDeductedForLeaves
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncometaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncometax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeductionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeduction
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NetSalaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetSalary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PaySlipRow
            Get
                Return CType(Me.Rows(index),PaySlipRow)
            End Get
        End Property
        
        Public Event PaySlipRowChanging As PaySlipRowChangeEventHandler
        
        Public Event PaySlipRowChanged As PaySlipRowChangeEventHandler
        
        Public Event PaySlipRowDeleting As PaySlipRowChangeEventHandler
        
        Public Event PaySlipRowDeleted As PaySlipRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPaySlipRow(ByVal row As PaySlipRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPaySlipRow( _
                    ByVal EmployeeNo As String,  _
                    ByVal _Date As Date,  _
                    ByVal ChequeNo As String,  _
                    ByVal Department As String,  _
                    ByVal HRA As String,  _
                    ByVal DA As String,  _
                    ByVal TA As String,  _
                    ByVal SalaryduringOT As String,  _
                    ByVal Allowance As String,  _
                    ByVal PF As String,  _
                    ByVal Increment As String,  _
                    ByVal SalaryDeductedForLeaves As String,  _
                    ByVal Incometax As String,  _
                    ByVal Deduction As String,  _
                    ByVal NetSalary As String,  _
                    ByVal PT As String) As PaySlipRow
            Dim rowPaySlipRow As PaySlipRow = CType(Me.NewRow,PaySlipRow)
            Dim columnValuesArray() As Object = New Object() {EmployeeNo, _Date, ChequeNo, Department, HRA, DA, TA, SalaryduringOT, Allowance, PF, Increment, SalaryDeductedForLeaves, Incometax, Deduction, NetSalary, PT}
            rowPaySlipRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPaySlipRow)
            Return rowPaySlipRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PaySlipDataTable = CType(MyBase.Clone,PaySlipDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PaySlipDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEmployeeNo = MyBase.Columns("EmployeeNo")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnChequeNo = MyBase.Columns("ChequeNo")
            Me.columnDepartment = MyBase.Columns("Department")
            Me.columnHRA = MyBase.Columns("HRA")
            Me.columnDA = MyBase.Columns("DA")
            Me.columnTA = MyBase.Columns("TA")
            Me.columnSalaryduringOT = MyBase.Columns("SalaryduringOT")
            Me.columnAllowance = MyBase.Columns("Allowance")
            Me.columnPF = MyBase.Columns("PF")
            Me.columnIncrement = MyBase.Columns("Increment")
            Me.columnSalaryDeductedForLeaves = MyBase.Columns("SalaryDeductedForLeaves")
            Me.columnIncometax = MyBase.Columns("Incometax")
            Me.columnDeduction = MyBase.Columns("Deduction")
            Me.columnNetSalary = MyBase.Columns("NetSalary")
            Me.columnPT = MyBase.Columns("PT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEmployeeNo = New Global.System.Data.DataColumn("EmployeeNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployeeNo)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnChequeNo = New Global.System.Data.DataColumn("ChequeNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChequeNo)
            Me.columnDepartment = New Global.System.Data.DataColumn("Department", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartment)
            Me.columnHRA = New Global.System.Data.DataColumn("HRA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHRA)
            Me.columnDA = New Global.System.Data.DataColumn("DA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDA)
            Me.columnTA = New Global.System.Data.DataColumn("TA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTA)
            Me.columnSalaryduringOT = New Global.System.Data.DataColumn("SalaryduringOT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalaryduringOT)
            Me.columnAllowance = New Global.System.Data.DataColumn("Allowance", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAllowance)
            Me.columnPF = New Global.System.Data.DataColumn("PF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPF)
            Me.columnIncrement = New Global.System.Data.DataColumn("Increment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncrement)
            Me.columnSalaryDeductedForLeaves = New Global.System.Data.DataColumn("SalaryDeductedForLeaves", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalaryDeductedForLeaves)
            Me.columnIncometax = New Global.System.Data.DataColumn("Incometax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncometax)
            Me.columnDeduction = New Global.System.Data.DataColumn("Deduction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeduction)
            Me.columnNetSalary = New Global.System.Data.DataColumn("NetSalary", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetSalary)
            Me.columnPT = New Global.System.Data.DataColumn("PT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPT)
            Me.columnEmployeeNo.MaxLength = 50
            Me.columnChequeNo.MaxLength = 50
            Me.columnDepartment.MaxLength = 50
            Me.columnHRA.MaxLength = 50
            Me.columnDA.MaxLength = 50
            Me.columnTA.MaxLength = 50
            Me.columnSalaryduringOT.MaxLength = 50
            Me.columnAllowance.MaxLength = 50
            Me.columnPF.MaxLength = 50
            Me.columnIncrement.MaxLength = 50
            Me.columnSalaryDeductedForLeaves.MaxLength = 50
            Me.columnIncometax.MaxLength = 50
            Me.columnDeduction.MaxLength = 50
            Me.columnNetSalary.MaxLength = 50
            Me.columnPT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPaySlipRow() As PaySlipRow
            Return CType(Me.NewRow,PaySlipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PaySlipRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PaySlipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PaySlipRowChangedEvent) Is Nothing) Then
                RaiseEvent PaySlipRowChanged(Me, New PaySlipRowChangeEvent(CType(e.Row,PaySlipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PaySlipRowChangingEvent) Is Nothing) Then
                RaiseEvent PaySlipRowChanging(Me, New PaySlipRowChangeEvent(CType(e.Row,PaySlipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PaySlipRowDeletedEvent) Is Nothing) Then
                RaiseEvent PaySlipRowDeleted(Me, New PaySlipRowChangeEvent(CType(e.Row,PaySlipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PaySlipRowDeletingEvent) Is Nothing) Then
                RaiseEvent PaySlipRowDeleting(Me, New PaySlipRowChangeEvent(CType(e.Row,PaySlipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePaySlipRow(ByVal row As PaySlipRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PaySlipDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TrainingDataTable
        Inherits Global.System.Data.TypedTableBase(Of TrainingRow)
        
        Private columnTraining_date As Global.System.Data.DataColumn
        
        Private columnDay As Global.System.Data.DataColumn
        
        Private columnTime As Global.System.Data.DataColumn
        
        Private columnTakenBy As Global.System.Data.DataColumn
        
        Private columnEmp As Global.System.Data.DataColumn
        
        Private columnHeld As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Training"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Training_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTraining_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TakenByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTakenBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HeldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHeld
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TrainingRow
            Get
                Return CType(Me.Rows(index),TrainingRow)
            End Get
        End Property
        
        Public Event TrainingRowChanging As TrainingRowChangeEventHandler
        
        Public Event TrainingRowChanged As TrainingRowChangeEventHandler
        
        Public Event TrainingRowDeleting As TrainingRowChangeEventHandler
        
        Public Event TrainingRowDeleted As TrainingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTrainingRow(ByVal row As TrainingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTrainingRow(ByVal Training_date As String, ByVal Day As String, ByVal Time As String, ByVal TakenBy As String, ByVal Emp As String, ByVal Held As String) As TrainingRow
            Dim rowTrainingRow As TrainingRow = CType(Me.NewRow,TrainingRow)
            Dim columnValuesArray() As Object = New Object() {Training_date, Day, Time, TakenBy, Emp, Held}
            rowTrainingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTrainingRow)
            Return rowTrainingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TrainingDataTable = CType(MyBase.Clone,TrainingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TrainingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTraining_date = MyBase.Columns("Training_date")
            Me.columnDay = MyBase.Columns("Day")
            Me.columnTime = MyBase.Columns("Time")
            Me.columnTakenBy = MyBase.Columns("TakenBy")
            Me.columnEmp = MyBase.Columns("Emp")
            Me.columnHeld = MyBase.Columns("Held")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTraining_date = New Global.System.Data.DataColumn("Training_date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTraining_date)
            Me.columnDay = New Global.System.Data.DataColumn("Day", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDay)
            Me.columnTime = New Global.System.Data.DataColumn("Time", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime)
            Me.columnTakenBy = New Global.System.Data.DataColumn("TakenBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTakenBy)
            Me.columnEmp = New Global.System.Data.DataColumn("Emp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmp)
            Me.columnHeld = New Global.System.Data.DataColumn("Held", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHeld)
            Me.columnTraining_date.AllowDBNull = false
            Me.columnTraining_date.MaxLength = 50
            Me.columnDay.AllowDBNull = false
            Me.columnDay.MaxLength = 50
            Me.columnTime.AllowDBNull = false
            Me.columnTime.MaxLength = 50
            Me.columnTakenBy.AllowDBNull = false
            Me.columnTakenBy.MaxLength = 50
            Me.columnEmp.AllowDBNull = false
            Me.columnEmp.MaxLength = 50
            Me.columnHeld.AllowDBNull = false
            Me.columnHeld.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTrainingRow() As TrainingRow
            Return CType(Me.NewRow,TrainingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TrainingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TrainingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TrainingRowChangedEvent) Is Nothing) Then
                RaiseEvent TrainingRowChanged(Me, New TrainingRowChangeEvent(CType(e.Row,TrainingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TrainingRowChangingEvent) Is Nothing) Then
                RaiseEvent TrainingRowChanging(Me, New TrainingRowChangeEvent(CType(e.Row,TrainingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TrainingRowDeletedEvent) Is Nothing) Then
                RaiseEvent TrainingRowDeleted(Me, New TrainingRowChangeEvent(CType(e.Row,TrainingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TrainingRowDeletingEvent) Is Nothing) Then
                RaiseEvent TrainingRowDeleting(Me, New TrainingRowChangeEvent(CType(e.Row,TrainingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTrainingRow(ByVal row As TrainingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As JETAIRWAYSDataSet = New JETAIRWAYSDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TrainingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AttendanceRow
        Inherits Global.System.Data.DataRow
        
        Private tableAttendance As AttendanceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAttendance = CType(Me.Table,AttendanceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmpId() As String
            Get
                Try 
                    Return CType(Me(Me.tableAttendance.EmpIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmpId' in table 'Attendance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttendance.EmpIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrentDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAttendance.CurrentDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrentDate' in table 'Attendance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttendance.CurrentDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TimeIn() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAttendance.TimeInColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeIn' in table 'Attendance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttendance.TimeInColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TimeOut() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAttendance.TimeOutColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeOut' in table 'Attendance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttendance.TimeOutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OT() As String
            Get
                Try 
                    Return CType(Me(Me.tableAttendance.OTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OT' in table 'Attendance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttendance.OTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableAttendance.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'Attendance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttendance.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmpIdNull() As Boolean
            Return Me.IsNull(Me.tableAttendance.EmpIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmpIdNull()
            Me(Me.tableAttendance.EmpIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrentDateNull() As Boolean
            Return Me.IsNull(Me.tableAttendance.CurrentDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrentDateNull()
            Me(Me.tableAttendance.CurrentDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTimeInNull() As Boolean
            Return Me.IsNull(Me.tableAttendance.TimeInColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTimeInNull()
            Me(Me.tableAttendance.TimeInColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTimeOutNull() As Boolean
            Return Me.IsNull(Me.tableAttendance.TimeOutColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTimeOutNull()
            Me(Me.tableAttendance.TimeOutColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTNull() As Boolean
            Return Me.IsNull(Me.tableAttendance.OTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTNull()
            Me(Me.tableAttendance.OTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableAttendance.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableAttendance.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CBriefRow
        Inherits Global.System.Data.DataRow
        
        Private tableCBrief As CBriefDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCBrief = CType(Me.Table,CBriefDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_no() As String
            Get
                Return CType(Me(Me.tableCBrief.Flight_noColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Flight_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_date() As String
            Get
                Return CType(Me(Me.tableCBrief.Flight_dateColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Flight_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reg_no() As String
            Get
                Return CType(Me(Me.tableCBrief.Reg_noColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Reg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bay_no() As String
            Get
                Return CType(Me(Me.tableCBrief.Bay_noColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Bay_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aircraft_type() As String
            Get
                Return CType(Me(Me.tableCBrief.Aircraft_typeColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Aircraft_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Engine() As String
            Get
                Return CType(Me(Me.tableCBrief.EngineColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.EngineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFrom1() As String
            Get
                Return CType(Me(Me.tableCBrief.MFrom1Column),String)
            End Get
            Set
                Me(Me.tableCBrief.MFrom1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property To1() As String
            Get
                Return CType(Me(Me.tableCBrief.To1Column),String)
            End Get
            Set
                Me(Me.tableCBrief.To1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD1() As String
            Get
                Return CType(Me(Me.tableCBrief.STD1Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STD1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD11() As String
            Get
                Return CType(Me(Me.tableCBrief.STD11Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STD11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA1() As String
            Get
                Return CType(Me(Me.tableCBrief.STA1Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA11() As String
            Get
                Return CType(Me(Me.tableCBrief.STA11Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STA11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFrom2() As String
            Get
                Return CType(Me(Me.tableCBrief.MFrom2Column),String)
            End Get
            Set
                Me(Me.tableCBrief.MFrom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property To2() As String
            Get
                Return CType(Me(Me.tableCBrief.To2Column),String)
            End Get
            Set
                Me(Me.tableCBrief.To2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD2() As String
            Get
                Return CType(Me(Me.tableCBrief.STD2Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD22() As String
            Get
                Return CType(Me(Me.tableCBrief.STD22Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STD22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA2() As String
            Get
                Return CType(Me(Me.tableCBrief.STA2Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA22() As String
            Get
                Return CType(Me(Me.tableCBrief.STA22Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STA22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFrom3() As String
            Get
                Return CType(Me(Me.tableCBrief.MFrom3Column),String)
            End Get
            Set
                Me(Me.tableCBrief.MFrom3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property To3() As String
            Get
                Return CType(Me(Me.tableCBrief.To3Column),String)
            End Get
            Set
                Me(Me.tableCBrief.To3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD3() As String
            Get
                Return CType(Me(Me.tableCBrief.STD3Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STD3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD33() As String
            Get
                Return CType(Me(Me.tableCBrief.STD33Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STD33Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA3() As String
            Get
                Return CType(Me(Me.tableCBrief.STA3Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STA3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA33() As String
            Get
                Return CType(Me(Me.tableCBrief.STA33Column),String)
            End Get
            Set
                Me(Me.tableCBrief.STA33Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep_Fuel() As String
            Get
                Return CType(Me(Me.tableCBrief.Dep_FuelColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Dep_FuelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Burn_Off_Fuel() As String
            Get
                Return CType(Me(Me.tableCBrief.Burn_Off_FuelColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Burn_Off_FuelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Extra() As String
            Get
                Return CType(Me(Me.tableCBrief.ExtraColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.ExtraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sector() As String
            Get
                Return CType(Me(Me.tableCBrief.SectorColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.SectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Extra_Fuel_Reason() As String
            Get
                Return CType(Me(Me.tableCBrief.Extra_Fuel_ReasonColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Extra_Fuel_ReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Emergency() As String
            Get
                Return CType(Me(Me.tableCBrief.EmergencyColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.EmergencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Emergency_landing_time() As String
            Get
                Return CType(Me(Me.tableCBrief.Emergency_landing_timeColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Emergency_landing_timeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Langing_Reason() As String
            Get
                Return CType(Me(Me.tableCBrief.Langing_ReasonColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Langing_ReasonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Captain_name() As String
            Get
                Return CType(Me(Me.tableCBrief.Captain_nameColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.Captain_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First_Off_name() As String
            Get
                Return CType(Me(Me.tableCBrief.First_Off_nameColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.First_Off_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Additional() As String
            Get
                Return CType(Me(Me.tableCBrief.AdditionalColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.AdditionalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cabin() As String
            Get
                Return CType(Me(Me.tableCBrief.CabinColumn),String)
            End Get
            Set
                Me(Me.tableCBrief.CabinColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DBriefRow
        Inherits Global.System.Data.DataRow
        
        Private tableDBrief As DBriefDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDBrief = CType(Me.Table,DBriefDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Flight_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flight_no' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Flight_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_date() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Flight_dateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flight_date' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Flight_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reg_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Reg_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reg_no' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Reg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bay_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Bay_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bay_no' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Bay_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aircraft_type() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Aircraft_typeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aircraft_type' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Aircraft_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Engine() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.EngineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Engine' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.EngineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFrom() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.MFromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MFrom' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.MFromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property To1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.To1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'To1' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.To1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STD1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STD1' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STD1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD11() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STD11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STD11' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STD11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA1() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STA1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STA1' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STA1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA11() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STA11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STA11' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STA11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFrom2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.MFrom2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MFrom2' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.MFrom2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property To2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.To2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'To2' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.To2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STD2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STD2' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD22() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STD22Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STD22' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STD22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA2() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STA2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STA2' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STA2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA22() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STA22Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STA22' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STA22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFrom3() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.MFrom3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MFrom3' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.MFrom3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property To3() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.To3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'To3' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.To3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD3() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STD3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STD3' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STD3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD33() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STD33Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STD33' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STD33Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA3() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STA3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STA3' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STA3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA33() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.STA33Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STA33' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.STA33Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recomended_Fuel() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Recomended_FuelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Recomended_Fuel' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Recomended_FuelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Extra() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.ExtraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Extra' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.ExtraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Captain_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Captain_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Captain_name' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Captain_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First_Off_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.First_Off_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'First_Off_name' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.First_Off_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Additional() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.AdditionalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Additional' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.AdditionalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Airhostess_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Airhostess_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Airhostess_name' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Airhostess_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Alternate_destination() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Alternate_destinationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Alternate_destination' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Alternate_destinationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dispatch_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Dispatch_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dispatch_no' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Dispatch_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Manager_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.Manager_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Manager_no' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.Manager_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Wind() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.WindColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Wind' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.WindColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Humidity() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.HumidityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Humidity' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.HumidityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pressure() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.PressureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pressure' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.PressureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dew() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.DewColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dew' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.DewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Visibility() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.VisibilityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Visibility' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.VisibilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableDBrief.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Type' in table 'DBrief' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDBrief.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFlight_noNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Flight_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFlight_noNull()
            Me(Me.tableDBrief.Flight_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFlight_dateNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Flight_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFlight_dateNull()
            Me(Me.tableDBrief.Flight_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReg_noNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Reg_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReg_noNull()
            Me(Me.tableDBrief.Reg_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBay_noNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Bay_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBay_noNull()
            Me(Me.tableDBrief.Bay_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAircraft_typeNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Aircraft_typeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAircraft_typeNull()
            Me(Me.tableDBrief.Aircraft_typeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEngineNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.EngineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEngineNull()
            Me(Me.tableDBrief.EngineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFromNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.MFromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFromNull()
            Me(Me.tableDBrief.MFromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTo1Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.To1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTo1Null()
            Me(Me.tableDBrief.To1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTD1Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STD1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTD1Null()
            Me(Me.tableDBrief.STD1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTD11Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STD11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTD11Null()
            Me(Me.tableDBrief.STD11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTA1Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STA1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTA1Null()
            Me(Me.tableDBrief.STA1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTA11Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STA11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTA11Null()
            Me(Me.tableDBrief.STA11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFrom2Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.MFrom2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFrom2Null()
            Me(Me.tableDBrief.MFrom2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTo2Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.To2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTo2Null()
            Me(Me.tableDBrief.To2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTD2Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTD2Null()
            Me(Me.tableDBrief.STD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTD22Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STD22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTD22Null()
            Me(Me.tableDBrief.STD22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTA2Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STA2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTA2Null()
            Me(Me.tableDBrief.STA2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTA22Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STA22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTA22Null()
            Me(Me.tableDBrief.STA22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFrom3Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.MFrom3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFrom3Null()
            Me(Me.tableDBrief.MFrom3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTo3Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.To3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTo3Null()
            Me(Me.tableDBrief.To3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTD3Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STD3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTD3Null()
            Me(Me.tableDBrief.STD3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTD33Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STD33Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTD33Null()
            Me(Me.tableDBrief.STD33Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTA3Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STA3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTA3Null()
            Me(Me.tableDBrief.STA3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTA33Null() As Boolean
            Return Me.IsNull(Me.tableDBrief.STA33Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTA33Null()
            Me(Me.tableDBrief.STA33Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecomended_FuelNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Recomended_FuelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecomended_FuelNull()
            Me(Me.tableDBrief.Recomended_FuelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExtraNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.ExtraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExtraNull()
            Me(Me.tableDBrief.ExtraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaptain_nameNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Captain_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaptain_nameNull()
            Me(Me.tableDBrief.Captain_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirst_Off_nameNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.First_Off_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirst_Off_nameNull()
            Me(Me.tableDBrief.First_Off_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdditionalNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.AdditionalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdditionalNull()
            Me(Me.tableDBrief.AdditionalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAirhostess_nameNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Airhostess_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAirhostess_nameNull()
            Me(Me.tableDBrief.Airhostess_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlternate_destinationNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Alternate_destinationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlternate_destinationNull()
            Me(Me.tableDBrief.Alternate_destinationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispatch_noNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Dispatch_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispatch_noNull()
            Me(Me.tableDBrief.Dispatch_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManager_noNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.Manager_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManager_noNull()
            Me(Me.tableDBrief.Manager_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWindNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.WindColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWindNull()
            Me(Me.tableDBrief.WindColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHumidityNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.HumidityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHumidityNull()
            Me(Me.tableDBrief.HumidityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPressureNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.PressureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPressureNull()
            Me(Me.tableDBrief.PressureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDewNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.DewColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDewNull()
            Me(Me.tableDBrief.DewColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisibilityNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.VisibilityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisibilityNull()
            Me(Me.tableDBrief.VisibilityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableDBrief.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableDBrief.TypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DesignationRow
        Inherits Global.System.Data.DataRow
        
        Private tableDesignation As DesignationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDesignation = CType(Me.Table,DesignationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepartmentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.DepartmentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DepartmentName' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.DepartmentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Designation() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.DesignationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Designation' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.DesignationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salary() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.SalaryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Salary' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.SalaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Leaves() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.LeavesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Leaves' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.LeavesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OTSalary() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.OTSalaryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OTSalary' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.OTSalaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeductedSalary() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.DeductedSalaryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeductedSalary' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.DeductedSalaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PF() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.PFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PF' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.PFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.HRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HRA' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.HRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.DAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DA' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.DAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDesignation.TAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TA' in table 'Designation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDesignation.TAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartmentNameNull() As Boolean
            Return Me.IsNull(Me.tableDesignation.DepartmentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartmentNameNull()
            Me(Me.tableDesignation.DepartmentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tableDesignation.DesignationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesignationNull()
            Me(Me.tableDesignation.DesignationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalaryNull() As Boolean
            Return Me.IsNull(Me.tableDesignation.SalaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalaryNull()
            Me(Me.tableDesignation.SalaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLeavesNull() As Boolean
            Return Me.IsNull(Me.tableDesignation.LeavesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLeavesNull()
            Me(Me.tableDesignation.LeavesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOTSalaryNull() As Boolean
            Return Me.IsNull(Me.tableDesignation.OTSalaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOTSalaryNull()
            Me(Me.tableDesignation.OTSalaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeductedSalaryNull() As Boolean
            Return Me.IsNull(Me.tableDesignation.DeductedSalaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeductedSalaryNull()
            Me(Me.tableDesignation.DeductedSalaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPFNull() As Boolean
            Return Me.IsNull(Me.tableDesignation.PFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPFNull()
            Me(Me.tableDesignation.PFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHRANull() As Boolean
            Return Me.IsNull(Me.tableDesignation.HRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHRANull()
            Me(Me.tableDesignation.HRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDANull() As Boolean
            Return Me.IsNull(Me.tableDesignation.DAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDANull()
            Me(Me.tableDesignation.DAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTANull() As Boolean
            Return Me.IsNull(Me.tableDesignation.TAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTANull()
            Me(Me.tableDesignation.TAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Employee_entryRow
        Inherits Global.System.Data.DataRow
        
        Private tableEmployee_entry As Employee_entryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmployee_entry = CType(Me.Table,Employee_entryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Employee_id() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Employee_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_id' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Employee_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Employee_last_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Employee_last_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_last_name' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Employee_last_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Employee_first_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Employee_first_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_first_name' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Employee_first_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Employee_middle_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Employee_middle_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_middle_name' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Employee_middle_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Residential_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Residential_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Residential_no' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Residential_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mobile_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Mobile_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mobile_no' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Mobile_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email_id() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Email_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email_id' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Email_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Blood_group() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Blood_groupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Blood_group' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Blood_groupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qualification() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.QualificationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qualification' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.QualificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.DOBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOJ() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.DOJColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOJ' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.DOJColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.DOLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOL' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.DOLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Designation() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.DesignationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Designation' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.DesignationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Department() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.DepartmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Department' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.DepartmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gross_salary() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.Gross_salaryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gross_salary' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.Gross_salaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HRA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.HRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HRA' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.HRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.DAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DA' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.DAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.TAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TA' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.TAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PF() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.PFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PF' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.PFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.PTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PT' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.PTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee_entry.PasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Password' in table 'Employee_entry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee_entry.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployee_idNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Employee_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployee_idNull()
            Me(Me.tableEmployee_entry.Employee_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployee_last_nameNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Employee_last_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployee_last_nameNull()
            Me(Me.tableEmployee_entry.Employee_last_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployee_first_nameNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Employee_first_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployee_first_nameNull()
            Me(Me.tableEmployee_entry.Employee_first_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployee_middle_nameNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Employee_middle_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployee_middle_nameNull()
            Me(Me.tableEmployee_entry.Employee_middle_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableEmployee_entry.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResidential_noNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Residential_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResidential_noNull()
            Me(Me.tableEmployee_entry.Residential_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMobile_noNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Mobile_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMobile_noNull()
            Me(Me.tableEmployee_entry.Mobile_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableEmployee_entry.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmail_idNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Email_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmail_idNull()
            Me(Me.tableEmployee_entry.Email_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBlood_groupNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Blood_groupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBlood_groupNull()
            Me(Me.tableEmployee_entry.Blood_groupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQualificationNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.QualificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQualificationNull()
            Me(Me.tableEmployee_entry.QualificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableEmployee_entry.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.DOJColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOJNull()
            Me(Me.tableEmployee_entry.DOJColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOLNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.DOLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOLNull()
            Me(Me.tableEmployee_entry.DOLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.DesignationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesignationNull()
            Me(Me.tableEmployee_entry.DesignationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartmentNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.DepartmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartmentNull()
            Me(Me.tableEmployee_entry.DepartmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableEmployee_entry.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGross_salaryNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.Gross_salaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGross_salaryNull()
            Me(Me.tableEmployee_entry.Gross_salaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHRANull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.HRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHRANull()
            Me(Me.tableEmployee_entry.HRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDANull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.DAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDANull()
            Me(Me.tableEmployee_entry.DAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTANull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.TAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTANull()
            Me(Me.tableEmployee_entry.TAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPFNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.PFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPFNull()
            Me(Me.tableEmployee_entry.PFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.PTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTNull()
            Me(Me.tableEmployee_entry.PTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableEmployee_entry.PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasswordNull()
            Me(Me.tableEmployee_entry.PasswordColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EventRow
        Inherits Global.System.Data.DataRow
        
        Private tableEvent As EventDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEvent = CType(Me.Table,EventDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Event_name() As String
            Get
                Return CType(Me(Me.tableEvent.Event_nameColumn),String)
            End Get
            Set
                Me(Me.tableEvent.Event_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Date() As String
            Get
                Return CType(Me(Me.tableEvent.DateColumn),String)
            End Get
            Set
                Me(Me.tableEvent.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Place() As String
            Get
                Return CType(Me(Me.tableEvent.PlaceColumn),String)
            End Get
            Set
                Me(Me.tableEvent.PlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time() As String
            Get
                Return CType(Me(Me.tableEvent.TimeColumn),String)
            End Get
            Set
                Me(Me.tableEvent.TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Day() As String
            Get
                Return CType(Me(Me.tableEvent.DayColumn),String)
            End Get
            Set
                Me(Me.tableEvent.DayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Org() As String
            Get
                Return CType(Me(Me.tableEvent.OrgColumn),String)
            End Get
            Set
                Me(Me.tableEvent.OrgColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableEvent.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableEvent.DescriptionColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FleetRow
        Inherits Global.System.Data.DataRow
        
        Private tableFleet As FleetDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFleet = CType(Me.Table,FleetDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aircraft_name() As String
            Get
                Return CType(Me(Me.tableFleet.Aircraft_nameColumn),String)
            End Get
            Set
                Me(Me.tableFleet.Aircraft_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property No_Of_Aircraft() As String
            Get
                Return CType(Me(Me.tableFleet.No_Of_AircraftColumn),String)
            End Get
            Set
                Me(Me.tableFleet.No_Of_AircraftColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Engine_type() As String
            Get
                Return CType(Me(Me.tableFleet.Engine_typeColumn),String)
            End Get
            Set
                Me(Me.tableFleet.Engine_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cruise_speed() As String
            Get
                Return CType(Me(Me.tableFleet.Cruise_speedColumn),String)
            End Get
            Set
                Me(Me.tableFleet.Cruise_speedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _A_C_lenght() As String
            Get
                Return CType(Me(Me.tableFleet._A_C_lenghtColumn),String)
            End Get
            Set
                Me(Me.tableFleet._A_C_lenghtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Wing_span() As String
            Get
                Return CType(Me(Me.tableFleet.Wing_spanColumn),String)
            End Get
            Set
                Me(Me.tableFleet.Wing_spanColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First_class() As String
            Get
                Return CType(Me(Me.tableFleet.First_classColumn),String)
            End Get
            Set
                Me(Me.tableFleet.First_classColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Premier_class() As String
            Get
                Return CType(Me(Me.tableFleet.Premier_classColumn),String)
            End Get
            Set
                Me(Me.tableFleet.Premier_classColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Economy_class() As String
            Get
                Return CType(Me(Me.tableFleet.Economy_classColumn),String)
            End Get
            Set
                Me(Me.tableFleet.Economy_classColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FlightRow
        Inherits Global.System.Data.DataRow
        
        Private tableFlight As FlightDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFlight = CType(Me.Table,FlightDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_no() As String
            Get
                Return CType(Me(Me.tableFlight.Flight_noColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Flight_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_date() As String
            Get
                Return CType(Me(Me.tableFlight.Flight_dateColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Flight_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reg_no() As String
            Get
                Return CType(Me(Me.tableFlight.Reg_noColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Reg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bay_no() As String
            Get
                Return CType(Me(Me.tableFlight.Bay_noColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Bay_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Leg_no() As String
            Get
                Return CType(Me(Me.tableFlight.Leg_noColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Leg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DI() As String
            Get
                Return CType(Me(Me.tableFlight.DIColumn),String)
            End Get
            Set
                Me(Me.tableFlight.DIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property From() As String
            Get
                Return CType(Me(Me.tableFlight.FromColumn),String)
            End Get
            Set
                Me(Me.tableFlight.FromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _To() As String
            Get
                Return CType(Me(Me.tableFlight.ToColumn),String)
            End Get
            Set
                Me(Me.tableFlight.ToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aircraft_type() As String
            Get
                Return CType(Me(Me.tableFlight.Aircraft_typeColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Aircraft_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Org_sec() As String
            Get
                Return CType(Me(Me.tableFlight.Org_secColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Org_secColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_type() As String
            Get
                Return CType(Me(Me.tableFlight.Flight_typeColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Flight_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep_Arr() As String
            Get
                Return CType(Me(Me.tableFlight.Dep_ArrColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Dep_ArrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD_IST() As String
            Get
                Return CType(Me(Me.tableFlight.STD_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFlight.STD_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD_UTC() As String
            Get
                Return CType(Me(Me.tableFlight.STD_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFlight.STD_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATD_IST() As String
            Get
                Return CType(Me(Me.tableFlight.ATD_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFlight.ATD_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATD_UTC() As String
            Get
                Return CType(Me(Me.tableFlight.ATD_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFlight.ATD_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AON_IST() As String
            Get
                Return CType(Me(Me.tableFlight.AON_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFlight.AON_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AON_UTC() As String
            Get
                Return CType(Me(Me.tableFlight.AON_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFlight.AON_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AOF_IST() As String
            Get
                Return CType(Me(Me.tableFlight.AOF_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFlight.AOF_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AOF_UTC() As String
            Get
                Return CType(Me(Me.tableFlight.AOF_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFlight.AOF_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA_IST() As String
            Get
                Return CType(Me(Me.tableFlight.STA_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFlight.STA_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA_UTC() As String
            Get
                Return CType(Me(Me.tableFlight.STA_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFlight.STA_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATA_IST() As String
            Get
                Return CType(Me(Me.tableFlight.ATA_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFlight.ATA_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATA_UTC() As String
            Get
                Return CType(Me(Me.tableFlight.ATA_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFlight.ATA_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep_Delay() As String
            Get
                Return CType(Me(Me.tableFlight.Dep_DelayColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Dep_DelayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Arr_Delay() As String
            Get
                Return CType(Me(Me.tableFlight.Arr_DelayColumn),String)
            End Get
            Set
                Me(Me.tableFlight.Arr_DelayColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FlightscheduleRow
        Inherits Global.System.Data.DataRow
        
        Private tableFlightschedule As FlightscheduleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFlightschedule = CType(Me.Table,FlightscheduleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_no() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Flight_noColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Flight_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_date() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Flight_dateColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Flight_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reg_no() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Reg_noColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Reg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bay_no() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Bay_noColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Bay_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Leg_no() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Leg_noColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Leg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aircraft_type() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Aircraft_typeColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Aircraft_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_type() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Flight_typeColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Flight_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DI() As String
            Get
                Return CType(Me(Me.tableFlightschedule.DIColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.DIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property From1() As String
            Get
                Return CType(Me(Me.tableFlightschedule.From1Column),String)
            End Get
            Set
                Me(Me.tableFlightschedule.From1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property To1() As String
            Get
                Return CType(Me(Me.tableFlightschedule.To1Column),String)
            End Get
            Set
                Me(Me.tableFlightschedule.To1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD_IST() As String
            Get
                Return CType(Me(Me.tableFlightschedule.STD_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.STD_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STD_UTC() As String
            Get
                Return CType(Me(Me.tableFlightschedule.STD_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.STD_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA_IST() As String
            Get
                Return CType(Me(Me.tableFlightschedule.STA_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.STA_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STA_UTC() As String
            Get
                Return CType(Me(Me.tableFlightschedule.STA_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.STA_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Captain_name() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Captain_nameColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Captain_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First_off_name() As String
            Get
                Return CType(Me(Me.tableFlightschedule.First_off_nameColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.First_off_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Airhostess_name() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Airhostess_nameColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Airhostess_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep_Arr() As String
            Get
                Return CType(Me(Me.tableFlightschedule.Dep_ArrColumn),String)
            End Get
            Set
                Me(Me.tableFlightschedule.Dep_ArrColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FuelManagementRow
        Inherits Global.System.Data.DataRow
        
        Private tableFuelManagement As FuelManagementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFuelManagement = CType(Me.Table,FuelManagementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_no() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Flight_noColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Flight_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_date() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Flight_dateColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Flight_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reg_no() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Reg_noColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Reg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bay_no() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Bay_noColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Bay_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property From1() As String
            Get
                Return CType(Me(Me.tableFuelManagement.From1Column),String)
            End Get
            Set
                Me(Me.tableFuelManagement.From1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property To1() As String
            Get
                Return CType(Me(Me.tableFuelManagement.To1Column),String)
            End Get
            Set
                Me(Me.tableFuelManagement.To1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Oil_Company() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Oil_CompanyColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Oil_CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepTime_IST() As String
            Get
                Return CType(Me(Me.tableFuelManagement.DepTime_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.DepTime_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DepTime_UTC() As String
            Get
                Return CType(Me(Me.tableFuelManagement.DepTime_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.DepTime_UTCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dep_Fuel() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Dep_FuelColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Dep_FuelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Burn_fuel() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Burn_fuelColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Burn_fuelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Arr_IST() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Arr_ISTColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Arr_ISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Arr_UTC() As String
            Get
                Return CType(Me(Me.tableFuelManagement.Arr_UTCColumn),String)
            End Get
            Set
                Me(Me.tableFuelManagement.Arr_UTCColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LogintableRow
        Inherits Global.System.Data.DataRow
        
        Private tableLogintable As LogintableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLogintable = CType(Me.Table,LogintableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property User_id() As String
            Get
                Return CType(Me(Me.tableLogintable.User_idColumn),String)
            End Get
            Set
                Me(Me.tableLogintable.User_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As String
            Get
                Return CType(Me(Me.tableLogintable.PasswordColumn),String)
            End Get
            Set
                Me(Me.tableLogintable.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Department() As String
            Get
                Try 
                    Return CType(Me(Me.tableLogintable.DepartmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Department' in table 'Logintable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLogintable.DepartmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Designation() As String
            Get
                Try 
                    Return CType(Me(Me.tableLogintable.DesignationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Designation' in table 'Logintable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLogintable.DesignationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartmentNull() As Boolean
            Return Me.IsNull(Me.tableLogintable.DepartmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartmentNull()
            Me(Me.tableLogintable.DepartmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesignationNull() As Boolean
            Return Me.IsNull(Me.tableLogintable.DesignationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesignationNull()
            Me(Me.tableLogintable.DesignationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PassengersRow
        Inherits Global.System.Data.DataRow
        
        Private tablePassengers As PassengersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePassengers = CType(Me.Table,PassengersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_no() As String
            Get
                Return CType(Me(Me.tablePassengers.Flight_noColumn),String)
            End Get
            Set
                Me(Me.tablePassengers.Flight_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flight_date() As String
            Get
                Return CType(Me(Me.tablePassengers.Flight_dateColumn),String)
            End Get
            Set
                Me(Me.tablePassengers.Flight_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property From() As String
            Get
                Return CType(Me(Me.tablePassengers.FromColumn),String)
            End Get
            Set
                Me(Me.tablePassengers.FromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _To() As String
            Get
                Return CType(Me(Me.tablePassengers.ToColumn),String)
            End Get
            Set
                Me(Me.tablePassengers.ToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Leg_no() As String
            Get
                Return CType(Me(Me.tablePassengers.Leg_noColumn),String)
            End Get
            Set
                Me(Me.tablePassengers.Leg_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First1() As String
            Get
                Return CType(Me(Me.tablePassengers.First1Column),String)
            End Get
            Set
                Me(Me.tablePassengers.First1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property First2() As String
            Get
                Return CType(Me(Me.tablePassengers.First2Column),String)
            End Get
            Set
                Me(Me.tablePassengers.First2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Premier1() As String
            Get
                Return CType(Me(Me.tablePassengers.Premier1Column),String)
            End Get
            Set
                Me(Me.tablePassengers.Premier1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property premier2() As String
            Get
                Return CType(Me(Me.tablePassengers.premier2Column),String)
            End Get
            Set
                Me(Me.tablePassengers.premier2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eco1() As String
            Get
                Return CType(Me(Me.tablePassengers.Eco1Column),String)
            End Get
            Set
                Me(Me.tablePassengers.Eco1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Eco2() As String
            Get
                Return CType(Me(Me.tablePassengers.Eco2Column),String)
            End Get
            Set
                Me(Me.tablePassengers.Eco2Column) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PaySlipRow
        Inherits Global.System.Data.DataRow
        
        Private tablePaySlip As PaySlipDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePaySlip = CType(Me.Table,PaySlipDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmployeeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.EmployeeNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeNo' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.EmployeeNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChequeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.ChequeNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChequeNo' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.ChequeNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Department() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.DepartmentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Department' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.DepartmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HRA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.HRAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HRA' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.HRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.DAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DA' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.DAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.TAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TA' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.TAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalaryduringOT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.SalaryduringOTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalaryduringOT' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.SalaryduringOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Allowance() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.AllowanceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Allowance' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.AllowanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PF() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.PFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PF' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.PFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Increment() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.IncrementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Increment' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.IncrementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalaryDeductedForLeaves() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.SalaryDeductedForLeavesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SalaryDeductedForLeaves' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.SalaryDeductedForLeavesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Incometax() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.IncometaxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Incometax' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.IncometaxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deduction() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.DeductionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deduction' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.DeductionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NetSalary() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.NetSalaryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NetSalary' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.NetSalaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePaySlip.PTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PT' in table 'PaySlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePaySlip.PTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmployeeNoNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.EmployeeNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmployeeNoNull()
            Me(Me.tablePaySlip.EmployeeNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_DateNull()
            Me(Me.tablePaySlip.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChequeNoNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.ChequeNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChequeNoNull()
            Me(Me.tablePaySlip.ChequeNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartmentNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.DepartmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartmentNull()
            Me(Me.tablePaySlip.DepartmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHRANull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.HRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHRANull()
            Me(Me.tablePaySlip.HRAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDANull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.DAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDANull()
            Me(Me.tablePaySlip.DAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTANull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.TAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTANull()
            Me(Me.tablePaySlip.TAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalaryduringOTNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.SalaryduringOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalaryduringOTNull()
            Me(Me.tablePaySlip.SalaryduringOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAllowanceNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.AllowanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAllowanceNull()
            Me(Me.tablePaySlip.AllowanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPFNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.PFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPFNull()
            Me(Me.tablePaySlip.PFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncrementNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.IncrementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncrementNull()
            Me(Me.tablePaySlip.IncrementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalaryDeductedForLeavesNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.SalaryDeductedForLeavesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalaryDeductedForLeavesNull()
            Me(Me.tablePaySlip.SalaryDeductedForLeavesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncometaxNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.IncometaxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncometaxNull()
            Me(Me.tablePaySlip.IncometaxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeductionNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.DeductionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeductionNull()
            Me(Me.tablePaySlip.DeductionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNetSalaryNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.NetSalaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNetSalaryNull()
            Me(Me.tablePaySlip.NetSalaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPTNull() As Boolean
            Return Me.IsNull(Me.tablePaySlip.PTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPTNull()
            Me(Me.tablePaySlip.PTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TrainingRow
        Inherits Global.System.Data.DataRow
        
        Private tableTraining As TrainingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTraining = CType(Me.Table,TrainingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Training_date() As String
            Get
                Return CType(Me(Me.tableTraining.Training_dateColumn),String)
            End Get
            Set
                Me(Me.tableTraining.Training_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Day() As String
            Get
                Return CType(Me(Me.tableTraining.DayColumn),String)
            End Get
            Set
                Me(Me.tableTraining.DayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time() As String
            Get
                Return CType(Me(Me.tableTraining.TimeColumn),String)
            End Get
            Set
                Me(Me.tableTraining.TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TakenBy() As String
            Get
                Return CType(Me(Me.tableTraining.TakenByColumn),String)
            End Get
            Set
                Me(Me.tableTraining.TakenByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Emp() As String
            Get
                Return CType(Me(Me.tableTraining.EmpColumn),String)
            End Get
            Set
                Me(Me.tableTraining.EmpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Held() As String
            Get
                Return CType(Me(Me.tableTraining.HeldColumn),String)
            End Get
            Set
                Me(Me.tableTraining.HeldColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AttendanceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AttendanceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AttendanceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AttendanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CBriefRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CBriefRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CBriefRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CBriefRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DBriefRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DBriefRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DBriefRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DBriefRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DesignationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DesignationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DesignationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DesignationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Employee_entryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Employee_entryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Employee_entryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Employee_entryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EventRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EventRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EventRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EventRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FleetRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FleetRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FleetRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FleetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FlightRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FlightRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FlightRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FlightRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FlightscheduleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FlightscheduleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FlightscheduleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FlightscheduleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FuelManagementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FuelManagementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FuelManagementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FuelManagementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LogintableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LogintableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LogintableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LogintableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PassengersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PassengersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PassengersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PassengersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PaySlipRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PaySlipRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PaySlipRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PaySlipRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TrainingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TrainingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TrainingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TrainingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace JETAIRWAYSDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AttendanceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Attendance"
            tableMapping.ColumnMappings.Add("EmpId", "EmpId")
            tableMapping.ColumnMappings.Add("CurrentDate", "CurrentDate")
            tableMapping.ColumnMappings.Add("TimeIn", "TimeIn")
            tableMapping.ColumnMappings.Add("TimeOut", "TimeOut")
            tableMapping.ColumnMappings.Add("OT", "OT")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Attendance] ([EmpId], [CurrentDate], [TimeIn], [TimeOut], [OT]"& _ 
                ", [Type]) VALUES (@EmpId, @CurrentDate, @TimeIn, @TimeOut, @OT, @Type)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmpId", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmpId", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrentDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeIn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeIn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TimeOut", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeOut", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT EmpId, CurrentDate, TimeIn, TimeOut, OT, Type FROM dbo.Attendance"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.AttendanceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.AttendanceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.AttendanceDataTable = New JETAIRWAYSDataSet.AttendanceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.AttendanceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Attendance")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal EmpId As String, ByVal CurrentDate As Global.System.Nullable(Of Date), ByVal TimeIn As Global.System.Nullable(Of Date), ByVal TimeOut As Global.System.Nullable(Of Date), ByVal OT As String, ByVal Type As String) As Integer
            If (EmpId Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(EmpId,String)
            End If
            If (CurrentDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CurrentDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (TimeIn.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TimeIn.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TimeOut.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TimeOut.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (OT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OT,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CBriefTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CBrief"
            tableMapping.ColumnMappings.Add("Flight_no", "Flight_no")
            tableMapping.ColumnMappings.Add("Flight_date", "Flight_date")
            tableMapping.ColumnMappings.Add("Reg_no", "Reg_no")
            tableMapping.ColumnMappings.Add("Bay_no", "Bay_no")
            tableMapping.ColumnMappings.Add("Aircraft_type", "Aircraft_type")
            tableMapping.ColumnMappings.Add("Engine", "Engine")
            tableMapping.ColumnMappings.Add("MFrom1", "MFrom1")
            tableMapping.ColumnMappings.Add("To1", "To1")
            tableMapping.ColumnMappings.Add("STD1", "STD1")
            tableMapping.ColumnMappings.Add("STD11", "STD11")
            tableMapping.ColumnMappings.Add("STA1", "STA1")
            tableMapping.ColumnMappings.Add("STA11", "STA11")
            tableMapping.ColumnMappings.Add("MFrom2", "MFrom2")
            tableMapping.ColumnMappings.Add("To2", "To2")
            tableMapping.ColumnMappings.Add("STD2", "STD2")
            tableMapping.ColumnMappings.Add("STD22", "STD22")
            tableMapping.ColumnMappings.Add("STA2", "STA2")
            tableMapping.ColumnMappings.Add("STA22", "STA22")
            tableMapping.ColumnMappings.Add("MFrom3", "MFrom3")
            tableMapping.ColumnMappings.Add("To3", "To3")
            tableMapping.ColumnMappings.Add("STD3", "STD3")
            tableMapping.ColumnMappings.Add("STD33", "STD33")
            tableMapping.ColumnMappings.Add("STA3", "STA3")
            tableMapping.ColumnMappings.Add("STA33", "STA33")
            tableMapping.ColumnMappings.Add("Dep_Fuel", "Dep_Fuel")
            tableMapping.ColumnMappings.Add("Burn_Off_Fuel", "Burn_Off_Fuel")
            tableMapping.ColumnMappings.Add("Extra", "Extra")
            tableMapping.ColumnMappings.Add("Sector", "Sector")
            tableMapping.ColumnMappings.Add("Extra_Fuel_Reason", "Extra_Fuel_Reason")
            tableMapping.ColumnMappings.Add("Emergency", "Emergency")
            tableMapping.ColumnMappings.Add("Emergency_landing_time", "Emergency_landing_time")
            tableMapping.ColumnMappings.Add("Langing_Reason", "Langing_Reason")
            tableMapping.ColumnMappings.Add("Captain_name", "Captain_name")
            tableMapping.ColumnMappings.Add("First_Off_name", "First_Off_name")
            tableMapping.ColumnMappings.Add("Additional", "Additional")
            tableMapping.ColumnMappings.Add("Cabin", "Cabin")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CBrief] ([Flight_no], [Flight_date], [Reg_no], [Bay_no], [Airc"& _ 
                "raft_type], [Engine], [MFrom1], [To1], [STD1], [STD11], [STA1], [STA11], [MFrom2"& _ 
                "], [To2], [STD2], [STD22], [STA2], [STA22], [MFrom3], [To3], [STD3], [STD33], [S"& _ 
                "TA3], [STA33], [Dep_Fuel], [Burn_Off_Fuel], [Extra], [Sector], [Extra_Fuel_Reaso"& _ 
                "n], [Emergency], [Emergency_landing_time], [Langing_Reason], [Captain_name], [Fi"& _ 
                "rst_Off_name], [Additional], [Cabin]) VALUES (@Flight_no, @Flight_date, @Reg_no,"& _ 
                " @Bay_no, @Aircraft_type, @Engine, @MFrom1, @To1, @STD1, @STD11, @STA1, @STA11, "& _ 
                "@MFrom2, @To2, @STD2, @STD22, @STA2, @STA22, @MFrom3, @To3, @STD3, @STD33, @STA3"& _ 
                ", @STA33, @Dep_Fuel, @Burn_Off_Fuel, @Extra, @Sector, @Extra_Fuel_Reason, @Emerg"& _ 
                "ency, @Emergency_landing_time, @Langing_Reason, @Captain_name, @First_Off_name, "& _ 
                "@Additional, @Cabin)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_date", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reg_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reg_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bay_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bay_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aircraft_type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aircraft_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Engine", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Engine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MFrom1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MFrom1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD11", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA11", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MFrom2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MFrom2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD22", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD22", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA22", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA22", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MFrom3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MFrom3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD33", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD33", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA33", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA33", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep_Fuel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep_Fuel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Burn_Off_Fuel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Burn_Off_Fuel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Extra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Extra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sector", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sector", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Extra_Fuel_Reason", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Extra_Fuel_Reason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Emergency", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Emergency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Emergency_landing_time", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Emergency_landing_time", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Langing_Reason", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Langing_Reason", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Captain_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Captain_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@First_Off_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "First_Off_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Additional", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Additional", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cabin", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cabin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Flight_no, Flight_date, Reg_no, Bay_no, Aircraft_type, Engine, MFrom1, To1"& _ 
                ", STD1, STD11, STA1, STA11, MFrom2, To2, STD2, STD22, STA2, STA22, MFrom3, To3, "& _ 
                "STD3, STD33, STA3, STA33, Dep_Fuel, Burn_Off_Fuel, Extra, Sector, Extra_Fuel_Rea"& _ 
                "son, Emergency, Emergency_landing_time, Langing_Reason, Captain_name, First_Off_"& _ 
                "name, Additional, Cabin FROM dbo.CBrief"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.CBriefDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.CBriefDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.CBriefDataTable = New JETAIRWAYSDataSet.CBriefDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.CBriefDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CBrief")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Flight_no As String,  _
                    ByVal Flight_date As String,  _
                    ByVal Reg_no As String,  _
                    ByVal Bay_no As String,  _
                    ByVal Aircraft_type As String,  _
                    ByVal Engine As String,  _
                    ByVal MFrom1 As String,  _
                    ByVal To1 As String,  _
                    ByVal STD1 As String,  _
                    ByVal STD11 As String,  _
                    ByVal STA1 As String,  _
                    ByVal STA11 As String,  _
                    ByVal MFrom2 As String,  _
                    ByVal To2 As String,  _
                    ByVal STD2 As String,  _
                    ByVal STD22 As String,  _
                    ByVal STA2 As String,  _
                    ByVal STA22 As String,  _
                    ByVal MFrom3 As String,  _
                    ByVal To3 As String,  _
                    ByVal STD3 As String,  _
                    ByVal STD33 As String,  _
                    ByVal STA3 As String,  _
                    ByVal STA33 As String,  _
                    ByVal Dep_Fuel As String,  _
                    ByVal Burn_Off_Fuel As String,  _
                    ByVal Extra As String,  _
                    ByVal Sector As String,  _
                    ByVal Extra_Fuel_Reason As String,  _
                    ByVal Emergency As String,  _
                    ByVal Emergency_landing_time As String,  _
                    ByVal Langing_Reason As String,  _
                    ByVal Captain_name As String,  _
                    ByVal First_Off_name As String,  _
                    ByVal Additional As String,  _
                    ByVal Cabin As String) As Integer
            If (Flight_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_no")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Flight_no,String)
            End If
            If (Flight_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_date")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Flight_date,String)
            End If
            If (Reg_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Reg_no")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Reg_no,String)
            End If
            If (Bay_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Bay_no")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Bay_no,String)
            End If
            If (Aircraft_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Aircraft_type")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Aircraft_type,String)
            End If
            If (Engine Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Engine")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Engine,String)
            End If
            If (MFrom1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MFrom1")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MFrom1,String)
            End If
            If (To1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("To1")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(To1,String)
            End If
            If (STD1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD1")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STD1,String)
            End If
            If (STD11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD11")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STD11,String)
            End If
            If (STA1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA1")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STA1,String)
            End If
            If (STA11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA11")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STA11,String)
            End If
            If (MFrom2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MFrom2")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MFrom2,String)
            End If
            If (To2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("To2")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(To2,String)
            End If
            If (STD2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD2")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(STD2,String)
            End If
            If (STD22 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD22")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(STD22,String)
            End If
            If (STA2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA2")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STA2,String)
            End If
            If (STA22 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA22")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(STA22,String)
            End If
            If (MFrom3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MFrom3")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MFrom3,String)
            End If
            If (To3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("To3")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(To3,String)
            End If
            If (STD3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD3")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(STD3,String)
            End If
            If (STD33 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD33")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(STD33,String)
            End If
            If (STA3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA3")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(STA3,String)
            End If
            If (STA33 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA33")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(STA33,String)
            End If
            If (Dep_Fuel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dep_Fuel")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Dep_Fuel,String)
            End If
            If (Burn_Off_Fuel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Burn_Off_Fuel")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Burn_Off_Fuel,String)
            End If
            If (Extra Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Extra")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Extra,String)
            End If
            If (Sector Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Sector")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Sector,String)
            End If
            If (Extra_Fuel_Reason Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Extra_Fuel_Reason")
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Extra_Fuel_Reason,String)
            End If
            If (Emergency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Emergency")
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Emergency,String)
            End If
            If (Emergency_landing_time Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Emergency_landing_time")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Emergency_landing_time,String)
            End If
            If (Langing_Reason Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Langing_Reason")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Langing_Reason,String)
            End If
            If (Captain_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Captain_name")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Captain_name,String)
            End If
            If (First_Off_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("First_Off_name")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(First_Off_name,String)
            End If
            If (Additional Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Additional")
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Additional,String)
            End If
            If (Cabin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cabin")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Cabin,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DBriefTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DBrief"
            tableMapping.ColumnMappings.Add("Flight_no", "Flight_no")
            tableMapping.ColumnMappings.Add("Flight_date", "Flight_date")
            tableMapping.ColumnMappings.Add("Reg_no", "Reg_no")
            tableMapping.ColumnMappings.Add("Bay_no", "Bay_no")
            tableMapping.ColumnMappings.Add("Aircraft_type", "Aircraft_type")
            tableMapping.ColumnMappings.Add("Engine", "Engine")
            tableMapping.ColumnMappings.Add("MFrom", "MFrom")
            tableMapping.ColumnMappings.Add("To1", "To1")
            tableMapping.ColumnMappings.Add("STD1", "STD1")
            tableMapping.ColumnMappings.Add("STD11", "STD11")
            tableMapping.ColumnMappings.Add("STA1", "STA1")
            tableMapping.ColumnMappings.Add("STA11", "STA11")
            tableMapping.ColumnMappings.Add("MFrom2", "MFrom2")
            tableMapping.ColumnMappings.Add("To2", "To2")
            tableMapping.ColumnMappings.Add("STD2", "STD2")
            tableMapping.ColumnMappings.Add("STD22", "STD22")
            tableMapping.ColumnMappings.Add("STA2", "STA2")
            tableMapping.ColumnMappings.Add("STA22", "STA22")
            tableMapping.ColumnMappings.Add("MFrom3", "MFrom3")
            tableMapping.ColumnMappings.Add("To3", "To3")
            tableMapping.ColumnMappings.Add("STD3", "STD3")
            tableMapping.ColumnMappings.Add("STD33", "STD33")
            tableMapping.ColumnMappings.Add("STA3", "STA3")
            tableMapping.ColumnMappings.Add("STA33", "STA33")
            tableMapping.ColumnMappings.Add("Recomended_Fuel", "Recomended_Fuel")
            tableMapping.ColumnMappings.Add("Extra", "Extra")
            tableMapping.ColumnMappings.Add("Captain_name", "Captain_name")
            tableMapping.ColumnMappings.Add("First_Off_name", "First_Off_name")
            tableMapping.ColumnMappings.Add("Additional", "Additional")
            tableMapping.ColumnMappings.Add("Airhostess_name", "Airhostess_name")
            tableMapping.ColumnMappings.Add("Alternate_destination", "Alternate_destination")
            tableMapping.ColumnMappings.Add("Dispatch_no", "Dispatch_no")
            tableMapping.ColumnMappings.Add("Manager_no", "Manager_no")
            tableMapping.ColumnMappings.Add("Wind", "Wind")
            tableMapping.ColumnMappings.Add("Humidity", "Humidity")
            tableMapping.ColumnMappings.Add("Pressure", "Pressure")
            tableMapping.ColumnMappings.Add("Dew", "Dew")
            tableMapping.ColumnMappings.Add("Visibility", "Visibility")
            tableMapping.ColumnMappings.Add("Type", "Type")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DBrief] ([Flight_no], [Flight_date], [Reg_no], [Bay_no], [Airc"& _ 
                "raft_type], [Engine], [MFrom], [To1], [STD1], [STD11], [STA1], [STA11], [MFrom2]"& _ 
                ", [To2], [STD2], [STD22], [STA2], [STA22], [MFrom3], [To3], [STD3], [STD33], [ST"& _ 
                "A3], [STA33], [Recomended_Fuel], [Extra], [Captain_name], [First_Off_name], [Add"& _ 
                "itional], [Airhostess_name], [Alternate_destination], [Dispatch_no], [Manager_no"& _ 
                "], [Wind], [Humidity], [Pressure], [Dew], [Visibility], [Type]) VALUES (@Flight_"& _ 
                "no, @Flight_date, @Reg_no, @Bay_no, @Aircraft_type, @Engine, @MFrom, @To1, @STD1"& _ 
                ", @STD11, @STA1, @STA11, @MFrom2, @To2, @STD2, @STD22, @STA2, @STA22, @MFrom3, @"& _ 
                "To3, @STD3, @STD33, @STA3, @STA33, @Recomended_Fuel, @Extra, @Captain_name, @Fir"& _ 
                "st_Off_name, @Additional, @Airhostess_name, @Alternate_destination, @Dispatch_no"& _ 
                ", @Manager_no, @Wind, @Humidity, @Pressure, @Dew, @Visibility, @Type)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_date", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reg_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reg_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bay_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bay_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aircraft_type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aircraft_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Engine", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Engine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MFrom", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MFrom", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD11", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA11", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA11", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MFrom2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MFrom2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD22", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD22", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA22", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA22", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MFrom3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MFrom3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD33", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD33", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA33", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA33", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Recomended_Fuel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Recomended_Fuel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Extra", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Extra", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Captain_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Captain_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@First_Off_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "First_Off_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Additional", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Additional", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Airhostess_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Airhostess_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Alternate_destination", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Alternate_destination", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dispatch_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dispatch_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Manager_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manager_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Wind", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wind", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Humidity", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Humidity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Pressure", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Pressure", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dew", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dew", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Visibility", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Visibility", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Flight_no, Flight_date, Reg_no, Bay_no, Aircraft_type, Engine, MFrom, To1,"& _ 
                " STD1, STD11, STA1, STA11, MFrom2, To2, STD2, STD22, STA2, STA22, MFrom3, To3, S"& _ 
                "TD3, STD33, STA3, STA33, Recomended_Fuel, Extra, Captain_name, First_Off_name, A"& _ 
                "dditional, Airhostess_name, Alternate_destination, Dispatch_no, Manager_no, Wind"& _ 
                ", Humidity, Pressure, Dew, Visibility, Type FROM dbo.DBrief"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.DBriefDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.DBriefDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.DBriefDataTable = New JETAIRWAYSDataSet.DBriefDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.DBriefDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DBrief")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Flight_no As String,  _
                    ByVal Flight_date As String,  _
                    ByVal Reg_no As String,  _
                    ByVal Bay_no As String,  _
                    ByVal Aircraft_type As String,  _
                    ByVal Engine As String,  _
                    ByVal MFrom As String,  _
                    ByVal To1 As String,  _
                    ByVal STD1 As String,  _
                    ByVal STD11 As String,  _
                    ByVal STA1 As String,  _
                    ByVal STA11 As String,  _
                    ByVal MFrom2 As String,  _
                    ByVal To2 As String,  _
                    ByVal STD2 As String,  _
                    ByVal STD22 As String,  _
                    ByVal STA2 As String,  _
                    ByVal STA22 As String,  _
                    ByVal MFrom3 As String,  _
                    ByVal To3 As String,  _
                    ByVal STD3 As String,  _
                    ByVal STD33 As String,  _
                    ByVal STA3 As String,  _
                    ByVal STA33 As String,  _
                    ByVal Recomended_Fuel As String,  _
                    ByVal Extra As String,  _
                    ByVal Captain_name As String,  _
                    ByVal First_Off_name As String,  _
                    ByVal Additional As String,  _
                    ByVal Airhostess_name As String,  _
                    ByVal Alternate_destination As String,  _
                    ByVal Dispatch_no As String,  _
                    ByVal Manager_no As String,  _
                    ByVal Wind As String,  _
                    ByVal Humidity As String,  _
                    ByVal Pressure As String,  _
                    ByVal Dew As String,  _
                    ByVal Visibility As String,  _
                    ByVal Type As String) As Integer
            If (Flight_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Flight_no,String)
            End If
            If (Flight_date Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Flight_date,String)
            End If
            If (Reg_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Reg_no,String)
            End If
            If (Bay_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Bay_no,String)
            End If
            If (Aircraft_type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Aircraft_type,String)
            End If
            If (Engine Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Engine,String)
            End If
            If (MFrom Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MFrom,String)
            End If
            If (To1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(To1,String)
            End If
            If (STD1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(STD1,String)
            End If
            If (STD11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(STD11,String)
            End If
            If (STA1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STA1,String)
            End If
            If (STA11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STA11,String)
            End If
            If (MFrom2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MFrom2,String)
            End If
            If (To2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(To2,String)
            End If
            If (STD2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(STD2,String)
            End If
            If (STD22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(STD22,String)
            End If
            If (STA2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(STA2,String)
            End If
            If (STA22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(STA22,String)
            End If
            If (MFrom3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MFrom3,String)
            End If
            If (To3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(To3,String)
            End If
            If (STD3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(STD3,String)
            End If
            If (STD33 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(STD33,String)
            End If
            If (STA3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(STA3,String)
            End If
            If (STA33 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(STA33,String)
            End If
            If (Recomended_Fuel Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Recomended_Fuel,String)
            End If
            If (Extra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Extra,String)
            End If
            If (Captain_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(Captain_name,String)
            End If
            If (First_Off_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(First_Off_name,String)
            End If
            If (Additional Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Additional,String)
            End If
            If (Airhostess_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Airhostess_name,String)
            End If
            If (Alternate_destination Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Alternate_destination,String)
            End If
            If (Dispatch_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Dispatch_no,String)
            End If
            If (Manager_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Manager_no,String)
            End If
            If (Wind Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Wind,String)
            End If
            If (Humidity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Humidity,String)
            End If
            If (Pressure Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Pressure,String)
            End If
            If (Dew Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(Dew,String)
            End If
            If (Visibility Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Visibility,String)
            End If
            If (Type Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(Type,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DesignationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Designation"
            tableMapping.ColumnMappings.Add("DepartmentName", "DepartmentName")
            tableMapping.ColumnMappings.Add("Designation", "Designation")
            tableMapping.ColumnMappings.Add("Salary", "Salary")
            tableMapping.ColumnMappings.Add("Leaves", "Leaves")
            tableMapping.ColumnMappings.Add("OTSalary", "OTSalary")
            tableMapping.ColumnMappings.Add("DeductedSalary", "DeductedSalary")
            tableMapping.ColumnMappings.Add("PF", "PF")
            tableMapping.ColumnMappings.Add("HRA", "HRA")
            tableMapping.ColumnMappings.Add("DA", "DA")
            tableMapping.ColumnMappings.Add("TA", "TA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Designation] ([DepartmentName], [Designation], [Salary], [Leav"& _ 
                "es], [OTSalary], [DeductedSalary], [PF], [HRA], [DA], [TA]) VALUES (@DepartmentN"& _ 
                "ame, @Designation, @Salary, @Leaves, @OTSalary, @DeductedSalary, @PF, @HRA, @DA,"& _ 
                " @TA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepartmentName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepartmentName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Designation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Designation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Salary", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Salary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Leaves", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Leaves", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OTSalary", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OTSalary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeductedSalary", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeductedSalary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HRA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DepartmentName, Designation, Salary, Leaves, OTSalary, DeductedSalary, PF,"& _ 
                " HRA, DA, TA FROM dbo.Designation"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.DesignationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.DesignationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.DesignationDataTable = New JETAIRWAYSDataSet.DesignationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.DesignationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Designation")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DepartmentName As String, ByVal Designation As String, ByVal Salary As String, ByVal Leaves As String, ByVal OTSalary As String, ByVal DeductedSalary As String, ByVal PF As String, ByVal HRA As String, ByVal DA As String, ByVal TA As String) As Integer
            If (DepartmentName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DepartmentName,String)
            End If
            If (Designation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Designation,String)
            End If
            If (Salary Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Salary,String)
            End If
            If (Leaves Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Leaves,String)
            End If
            If (OTSalary Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OTSalary,String)
            End If
            If (DeductedSalary Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DeductedSalary,String)
            End If
            If (PF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PF,String)
            End If
            If (HRA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(HRA,String)
            End If
            If (DA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DA,String)
            End If
            If (TA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Employee_entryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Employee_entry"
            tableMapping.ColumnMappings.Add("Employee_id", "Employee_id")
            tableMapping.ColumnMappings.Add("Employee_last_name", "Employee_last_name")
            tableMapping.ColumnMappings.Add("Employee_first_name", "Employee_first_name")
            tableMapping.ColumnMappings.Add("Employee_middle_name", "Employee_middle_name")
            tableMapping.ColumnMappings.Add("Address", "Address")
            tableMapping.ColumnMappings.Add("Residential_no", "Residential_no")
            tableMapping.ColumnMappings.Add("Mobile_no", "Mobile_no")
            tableMapping.ColumnMappings.Add("Gender", "Gender")
            tableMapping.ColumnMappings.Add("Email_id", "Email_id")
            tableMapping.ColumnMappings.Add("Blood_group", "Blood_group")
            tableMapping.ColumnMappings.Add("Qualification", "Qualification")
            tableMapping.ColumnMappings.Add("DOB", "DOB")
            tableMapping.ColumnMappings.Add("DOJ", "DOJ")
            tableMapping.ColumnMappings.Add("DOL", "DOL")
            tableMapping.ColumnMappings.Add("Designation", "Designation")
            tableMapping.ColumnMappings.Add("Department", "Department")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("Gross_salary", "Gross_salary")
            tableMapping.ColumnMappings.Add("HRA", "HRA")
            tableMapping.ColumnMappings.Add("DA", "DA")
            tableMapping.ColumnMappings.Add("TA", "TA")
            tableMapping.ColumnMappings.Add("PF", "PF")
            tableMapping.ColumnMappings.Add("PT", "PT")
            tableMapping.ColumnMappings.Add("Password", "Password")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Employee_entry] ([Employee_id], [Employee_last_name], [Employe"& _ 
                "e_first_name], [Employee_middle_name], [Address], [Residential_no], [Mobile_no],"& _ 
                " [Gender], [Email_id], [Blood_group], [Qualification], [DOB], [DOJ], [DOL], [Des"& _ 
                "ignation], [Department], [Status], [Gross_salary], [HRA], [DA], [TA], [PF], [PT]"& _ 
                ", [Password]) VALUES (@Employee_id, @Employee_last_name, @Employee_first_name, @"& _ 
                "Employee_middle_name, @Address, @Residential_no, @Mobile_no, @Gender, @Email_id,"& _ 
                " @Blood_group, @Qualification, @DOB, @DOJ, @DOL, @Designation, @Department, @Sta"& _ 
                "tus, @Gross_salary, @HRA, @DA, @TA, @PF, @PT, @Password)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_id", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_last_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_last_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_first_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_first_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_middle_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_middle_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Residential_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Residential_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mobile_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mobile_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email_id", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Blood_group", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Blood_group", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qualification", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qualification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOJ", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOJ", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DOL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Designation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Designation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Department", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Department", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gross_salary", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gross_salary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HRA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Employee_id, Employee_last_name, Employee_first_name, Employee_middle_name"& _ 
                ", Address, Residential_no, Mobile_no, Gender, Email_id, Blood_group, Qualificati"& _ 
                "on, DOB, DOJ, DOL, Designation, Department, Status, Gross_salary, HRA, DA, TA, P"& _ 
                "F, PT, Password FROM dbo.Employee_entry"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.Employee_entryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.Employee_entryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.Employee_entryDataTable = New JETAIRWAYSDataSet.Employee_entryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.Employee_entryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Employee_entry")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Employee_id As String,  _
                    ByVal Employee_last_name As String,  _
                    ByVal Employee_first_name As String,  _
                    ByVal Employee_middle_name As String,  _
                    ByVal Address As String,  _
                    ByVal Residential_no As String,  _
                    ByVal Mobile_no As String,  _
                    ByVal Gender As String,  _
                    ByVal Email_id As String,  _
                    ByVal Blood_group As String,  _
                    ByVal Qualification As String,  _
                    ByVal DOB As String,  _
                    ByVal DOJ As String,  _
                    ByVal DOL As String,  _
                    ByVal Designation As String,  _
                    ByVal Department As String,  _
                    ByVal Status As String,  _
                    ByVal Gross_salary As String,  _
                    ByVal HRA As String,  _
                    ByVal DA As String,  _
                    ByVal TA As String,  _
                    ByVal PF As String,  _
                    ByVal PT As String,  _
                    ByVal Password As String) As Integer
            If (Employee_id Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Employee_id,String)
            End If
            If (Employee_last_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Employee_last_name,String)
            End If
            If (Employee_first_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Employee_first_name,String)
            End If
            If (Employee_middle_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Employee_middle_name,String)
            End If
            If (Address Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Address,String)
            End If
            If (Residential_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Residential_no,String)
            End If
            If (Mobile_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Mobile_no,String)
            End If
            If (Gender Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Gender,String)
            End If
            If (Email_id Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Email_id,String)
            End If
            If (Blood_group Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Blood_group,String)
            End If
            If (Qualification Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Qualification,String)
            End If
            If (DOB Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(DOB,String)
            End If
            If (DOJ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DOJ,String)
            End If
            If (DOL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(DOL,String)
            End If
            If (Designation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Designation,String)
            End If
            If (Department Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Department,String)
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Status,String)
            End If
            If (Gross_salary Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Gross_salary,String)
            End If
            If (HRA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(HRA,String)
            End If
            If (DA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DA,String)
            End If
            If (TA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(TA,String)
            End If
            If (PF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PF,String)
            End If
            If (PT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PT,String)
            End If
            If (Password Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Password,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EventTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Event"
            tableMapping.ColumnMappings.Add("Event_name", "Event_name")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Place", "Place")
            tableMapping.ColumnMappings.Add("Time", "Time")
            tableMapping.ColumnMappings.Add("Day", "Day")
            tableMapping.ColumnMappings.Add("Org", "Org")
            tableMapping.ColumnMappings.Add("Description", "Description")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Event] ([Event_name], [Date], [Place], [Time], [Day], [Org], ["& _ 
                "Description]) VALUES (@Event_name, @Date, @Place, @Time, @Day, @Org, @Descriptio"& _ 
                "n)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Event_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Event_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Place", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Place", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Time", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Time", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Day", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Day", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Org", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Org", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Event_name, Date, Place, Time, Day, Org, Description FROM dbo.Event"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.EventDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.EventDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.EventDataTable = New JETAIRWAYSDataSet.EventDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.EventDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Event")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Event_name As String, ByVal _Date As String, ByVal Place As String, ByVal Time As String, ByVal Day As String, ByVal Org As String, ByVal Description As String) As Integer
            If (Event_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Event_name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Event_name,String)
            End If
            If (_Date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_Date")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_Date,String)
            End If
            If (Place Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Place")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Place,String)
            End If
            If (Time Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Time,String)
            End If
            If (Day Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Day")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Day,String)
            End If
            If (Org Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Org")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Org,String)
            End If
            If (Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Description,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FleetTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Fleet"
            tableMapping.ColumnMappings.Add("Aircraft_name", "Aircraft_name")
            tableMapping.ColumnMappings.Add("No_Of_Aircraft", "No_Of_Aircraft")
            tableMapping.ColumnMappings.Add("Engine_type", "Engine_type")
            tableMapping.ColumnMappings.Add("Cruise_speed", "Cruise_speed")
            tableMapping.ColumnMappings.Add("A/C_lenght", "A/C_lenght")
            tableMapping.ColumnMappings.Add("Wing_span", "Wing_span")
            tableMapping.ColumnMappings.Add("First_class", "First_class")
            tableMapping.ColumnMappings.Add("Premier_class", "Premier_class")
            tableMapping.ColumnMappings.Add("Economy_class", "Economy_class")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Fleet] ([Aircraft_name], [No_Of_Aircraft], [Engine_type], [Cru"& _ 
                "ise_speed], [A/C_lenght], [Wing_span], [First_class], [Premier_class], [Economy_"& _ 
                "class]) VALUES (@Aircraft_name, @No_Of_Aircraft, @Engine_type, @Cruise_speed, @p"& _ 
                "1, @Wing_span, @First_class, @Premier_class, @Economy_class)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aircraft_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aircraft_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No_Of_Aircraft", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No_Of_Aircraft", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Engine_type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Engine_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cruise_speed", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cruise_speed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "A/C_lenght", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Wing_span", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wing_span", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@First_class", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "First_class", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Premier_class", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Premier_class", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Economy_class", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Economy_class", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Aircraft_name, No_Of_Aircraft, Engine_type, Cruise_speed, [A/C_lenght], Wi"& _ 
                "ng_span, First_class, Premier_class, Economy_class FROM dbo.Fleet"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.FleetDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.FleetDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.FleetDataTable = New JETAIRWAYSDataSet.FleetDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.FleetDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Fleet")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Aircraft_name As String, ByVal No_Of_Aircraft As String, ByVal Engine_type As String, ByVal Cruise_speed As String, ByVal p1 As String, ByVal Wing_span As String, ByVal First_class As String, ByVal Premier_class As String, ByVal Economy_class As String) As Integer
            If (Aircraft_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Aircraft_name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Aircraft_name,String)
            End If
            If (No_Of_Aircraft Is Nothing) Then
                Throw New Global.System.ArgumentNullException("No_Of_Aircraft")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(No_Of_Aircraft,String)
            End If
            If (Engine_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Engine_type")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Engine_type,String)
            End If
            If (Cruise_speed Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cruise_speed")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Cruise_speed,String)
            End If
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p1,String)
            End If
            If (Wing_span Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Wing_span")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Wing_span,String)
            End If
            If (First_class Is Nothing) Then
                Throw New Global.System.ArgumentNullException("First_class")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(First_class,String)
            End If
            If (Premier_class Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Premier_class")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Premier_class,String)
            End If
            If (Economy_class Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Economy_class")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Economy_class,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FlightTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Flight"
            tableMapping.ColumnMappings.Add("Flight_no", "Flight_no")
            tableMapping.ColumnMappings.Add("Flight_date", "Flight_date")
            tableMapping.ColumnMappings.Add("Reg_no", "Reg_no")
            tableMapping.ColumnMappings.Add("Bay_no", "Bay_no")
            tableMapping.ColumnMappings.Add("Leg_no", "Leg_no")
            tableMapping.ColumnMappings.Add("DI", "DI")
            tableMapping.ColumnMappings.Add("From", "From")
            tableMapping.ColumnMappings.Add("To", "To")
            tableMapping.ColumnMappings.Add("Aircraft_type", "Aircraft_type")
            tableMapping.ColumnMappings.Add("Org_sec", "Org_sec")
            tableMapping.ColumnMappings.Add("Flight_type", "Flight_type")
            tableMapping.ColumnMappings.Add("Dep_Arr", "Dep_Arr")
            tableMapping.ColumnMappings.Add("STD_IST", "STD_IST")
            tableMapping.ColumnMappings.Add("STD_UTC", "STD_UTC")
            tableMapping.ColumnMappings.Add("ATD_IST", "ATD_IST")
            tableMapping.ColumnMappings.Add("ATD_UTC", "ATD_UTC")
            tableMapping.ColumnMappings.Add("AON_IST", "AON_IST")
            tableMapping.ColumnMappings.Add("AON_UTC", "AON_UTC")
            tableMapping.ColumnMappings.Add("AOF_IST", "AOF_IST")
            tableMapping.ColumnMappings.Add("AOF_UTC", "AOF_UTC")
            tableMapping.ColumnMappings.Add("STA_IST", "STA_IST")
            tableMapping.ColumnMappings.Add("STA_UTC", "STA_UTC")
            tableMapping.ColumnMappings.Add("ATA_IST", "ATA_IST")
            tableMapping.ColumnMappings.Add("ATA_UTC", "ATA_UTC")
            tableMapping.ColumnMappings.Add("Dep_Delay", "Dep_Delay")
            tableMapping.ColumnMappings.Add("Arr_Delay", "Arr_Delay")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Flight] ([Flight_no], [Flight_date], [Reg_no], [Bay_no], [Leg_"& _ 
                "no], [DI], [From], [To], [Aircraft_type], [Org_sec], [Flight_type], [Dep_Arr], ["& _ 
                "STD_IST], [STD_UTC], [ATD_IST], [ATD_UTC], [AON_IST], [AON_UTC], [AOF_IST], [AOF"& _ 
                "_UTC], [STA_IST], [STA_UTC], [ATA_IST], [ATA_UTC], [Dep_Delay], [Arr_Delay]) VAL"& _ 
                "UES (@Flight_no, @Flight_date, @Reg_no, @Bay_no, @Leg_no, @DI, @From, @To, @Airc"& _ 
                "raft_type, @Org_sec, @Flight_type, @Dep_Arr, @STD_IST, @STD_UTC, @ATD_IST, @ATD_"& _ 
                "UTC, @AON_IST, @AON_UTC, @AOF_IST, @AOF_UTC, @STA_IST, @STA_UTC, @ATA_IST, @ATA_"& _ 
                "UTC, @Dep_Delay, @Arr_Delay)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_date", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reg_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reg_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bay_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bay_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Leg_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Leg_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DI", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aircraft_type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aircraft_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Org_sec", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Org_sec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep_Arr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep_Arr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ATD_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ATD_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ATD_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ATD_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AON_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AON_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AON_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AON_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AOF_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AOF_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AOF_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AOF_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ATA_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ATA_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ATA_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ATA_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep_Delay", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep_Delay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Arr_Delay", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Arr_Delay", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Flight_no, Flight_date, Reg_no, Bay_no, Leg_no, DI, [From], [To], Aircraft"& _ 
                "_type, Org_sec, Flight_type, Dep_Arr, STD_IST, STD_UTC, ATD_IST, ATD_UTC, AON_IS"& _ 
                "T, AON_UTC, AOF_IST, AOF_UTC, STA_IST, STA_UTC, ATA_IST, ATA_UTC, Dep_Delay, Arr"& _ 
                "_Delay FROM dbo.Flight"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.FlightDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.FlightDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.FlightDataTable = New JETAIRWAYSDataSet.FlightDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.FlightDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Flight")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Flight_no As String,  _
                    ByVal Flight_date As String,  _
                    ByVal Reg_no As String,  _
                    ByVal Bay_no As String,  _
                    ByVal Leg_no As String,  _
                    ByVal DI As String,  _
                    ByVal From As String,  _
                    ByVal _To As String,  _
                    ByVal Aircraft_type As String,  _
                    ByVal Org_sec As String,  _
                    ByVal Flight_type As String,  _
                    ByVal Dep_Arr As String,  _
                    ByVal STD_IST As String,  _
                    ByVal STD_UTC As String,  _
                    ByVal ATD_IST As String,  _
                    ByVal ATD_UTC As String,  _
                    ByVal AON_IST As String,  _
                    ByVal AON_UTC As String,  _
                    ByVal AOF_IST As String,  _
                    ByVal AOF_UTC As String,  _
                    ByVal STA_IST As String,  _
                    ByVal STA_UTC As String,  _
                    ByVal ATA_IST As String,  _
                    ByVal ATA_UTC As String,  _
                    ByVal Dep_Delay As String,  _
                    ByVal Arr_Delay As String) As Integer
            If (Flight_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_no")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Flight_no,String)
            End If
            If (Flight_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_date")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Flight_date,String)
            End If
            If (Reg_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Reg_no")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Reg_no,String)
            End If
            If (Bay_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Bay_no")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Bay_no,String)
            End If
            If (Leg_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Leg_no")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Leg_no,String)
            End If
            If (DI Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DI")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DI,String)
            End If
            If (From Is Nothing) Then
                Throw New Global.System.ArgumentNullException("From")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(From,String)
            End If
            If (_To Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_To")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_To,String)
            End If
            If (Aircraft_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Aircraft_type")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Aircraft_type,String)
            End If
            If (Org_sec Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Org_sec")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Org_sec,String)
            End If
            If (Flight_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_type")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Flight_type,String)
            End If
            If (Dep_Arr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dep_Arr")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Dep_Arr,String)
            End If
            If (STD_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STD_IST,String)
            End If
            If (STD_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(STD_UTC,String)
            End If
            If (ATD_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ATD_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ATD_IST,String)
            End If
            If (ATD_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ATD_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ATD_UTC,String)
            End If
            If (AON_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AON_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(AON_IST,String)
            End If
            If (AON_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AON_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(AON_UTC,String)
            End If
            If (AOF_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AOF_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(AOF_IST,String)
            End If
            If (AOF_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AOF_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(AOF_UTC,String)
            End If
            If (STA_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(STA_IST,String)
            End If
            If (STA_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(STA_UTC,String)
            End If
            If (ATA_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ATA_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(ATA_IST,String)
            End If
            If (ATA_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ATA_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(ATA_UTC,String)
            End If
            If (Dep_Delay Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dep_Delay")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Dep_Delay,String)
            End If
            If (Arr_Delay Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Arr_Delay")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Arr_Delay,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FlightscheduleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Flightschedule"
            tableMapping.ColumnMappings.Add("Flight_no", "Flight_no")
            tableMapping.ColumnMappings.Add("Flight_date", "Flight_date")
            tableMapping.ColumnMappings.Add("Reg_no", "Reg_no")
            tableMapping.ColumnMappings.Add("Bay_no", "Bay_no")
            tableMapping.ColumnMappings.Add("Leg_no", "Leg_no")
            tableMapping.ColumnMappings.Add("Aircraft_type", "Aircraft_type")
            tableMapping.ColumnMappings.Add("Flight_type", "Flight_type")
            tableMapping.ColumnMappings.Add("DI", "DI")
            tableMapping.ColumnMappings.Add("From1", "From1")
            tableMapping.ColumnMappings.Add("To1", "To1")
            tableMapping.ColumnMappings.Add("STD_IST", "STD_IST")
            tableMapping.ColumnMappings.Add("STD_UTC", "STD_UTC")
            tableMapping.ColumnMappings.Add("STA_IST", "STA_IST")
            tableMapping.ColumnMappings.Add("STA_UTC", "STA_UTC")
            tableMapping.ColumnMappings.Add("Captain_name", "Captain_name")
            tableMapping.ColumnMappings.Add("First_off_name", "First_off_name")
            tableMapping.ColumnMappings.Add("Airhostess_name", "Airhostess_name")
            tableMapping.ColumnMappings.Add("Dep_Arr", "Dep_Arr")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Flightschedule] ([Flight_no], [Flight_date], [Reg_no], [Bay_no"& _ 
                "], [Leg_no], [Aircraft_type], [Flight_type], [DI], [From1], [To1], [STD_IST], [S"& _ 
                "TD_UTC], [STA_IST], [STA_UTC], [Captain_name], [First_off_name], [Airhostess_nam"& _ 
                "e], [Dep_Arr]) VALUES (@Flight_no, @Flight_date, @Reg_no, @Bay_no, @Leg_no, @Air"& _ 
                "craft_type, @Flight_type, @DI, @From1, @To1, @STD_IST, @STD_UTC, @STA_IST, @STA_"& _ 
                "UTC, @Captain_name, @First_off_name, @Airhostess_name, @Dep_Arr)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_date", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reg_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reg_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bay_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bay_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Leg_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Leg_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Aircraft_type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Aircraft_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_type", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DI", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DI", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "From1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STD_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STD_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STA_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STA_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Captain_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Captain_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@First_off_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "First_off_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Airhostess_name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Airhostess_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep_Arr", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep_Arr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Flight_no, Flight_date, Reg_no, Bay_no, Leg_no, Aircraft_type, Flight_type"& _ 
                ", DI, From1, To1, STD_IST, STD_UTC, STA_IST, STA_UTC, Captain_name, First_off_na"& _ 
                "me, Airhostess_name, Dep_Arr FROM dbo.Flightschedule"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.FlightscheduleDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.FlightscheduleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.FlightscheduleDataTable = New JETAIRWAYSDataSet.FlightscheduleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.FlightscheduleDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Flightschedule")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Flight_no As String,  _
                    ByVal Flight_date As String,  _
                    ByVal Reg_no As String,  _
                    ByVal Bay_no As String,  _
                    ByVal Leg_no As String,  _
                    ByVal Aircraft_type As String,  _
                    ByVal Flight_type As String,  _
                    ByVal DI As String,  _
                    ByVal From1 As String,  _
                    ByVal To1 As String,  _
                    ByVal STD_IST As String,  _
                    ByVal STD_UTC As String,  _
                    ByVal STA_IST As String,  _
                    ByVal STA_UTC As String,  _
                    ByVal Captain_name As String,  _
                    ByVal First_off_name As String,  _
                    ByVal Airhostess_name As String,  _
                    ByVal Dep_Arr As String) As Integer
            If (Flight_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_no")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Flight_no,String)
            End If
            If (Flight_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_date")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Flight_date,String)
            End If
            If (Reg_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Reg_no")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Reg_no,String)
            End If
            If (Bay_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Bay_no")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Bay_no,String)
            End If
            If (Leg_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Leg_no")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Leg_no,String)
            End If
            If (Aircraft_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Aircraft_type")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Aircraft_type,String)
            End If
            If (Flight_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_type")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Flight_type,String)
            End If
            If (DI Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DI")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DI,String)
            End If
            If (From1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("From1")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(From1,String)
            End If
            If (To1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("To1")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(To1,String)
            End If
            If (STD_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STD_IST,String)
            End If
            If (STD_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STD_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(STD_UTC,String)
            End If
            If (STA_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(STA_IST,String)
            End If
            If (STA_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STA_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(STA_UTC,String)
            End If
            If (Captain_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Captain_name")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Captain_name,String)
            End If
            If (First_off_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("First_off_name")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(First_off_name,String)
            End If
            If (Airhostess_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Airhostess_name")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Airhostess_name,String)
            End If
            If (Dep_Arr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dep_Arr")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Dep_Arr,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FuelManagementTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FuelManagement"
            tableMapping.ColumnMappings.Add("Flight_no", "Flight_no")
            tableMapping.ColumnMappings.Add("Flight_date", "Flight_date")
            tableMapping.ColumnMappings.Add("Reg_no", "Reg_no")
            tableMapping.ColumnMappings.Add("Bay_no", "Bay_no")
            tableMapping.ColumnMappings.Add("From1", "From1")
            tableMapping.ColumnMappings.Add("To1", "To1")
            tableMapping.ColumnMappings.Add("Oil_Company", "Oil_Company")
            tableMapping.ColumnMappings.Add("DepTime_IST", "DepTime_IST")
            tableMapping.ColumnMappings.Add("DepTime_UTC", "DepTime_UTC")
            tableMapping.ColumnMappings.Add("Dep_Fuel", "Dep_Fuel")
            tableMapping.ColumnMappings.Add("Burn_fuel", "Burn_fuel")
            tableMapping.ColumnMappings.Add("Arr_IST", "Arr_IST")
            tableMapping.ColumnMappings.Add("Arr_UTC", "Arr_UTC")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FuelManagement] ([Flight_no], [Flight_date], [Reg_no], [Bay_no"& _ 
                "], [From1], [To1], [Oil_Company], [DepTime_IST], [DepTime_UTC], [Dep_Fuel], [Bur"& _ 
                "n_fuel], [Arr_IST], [Arr_UTC]) VALUES (@Flight_no, @Flight_date, @Reg_no, @Bay_n"& _ 
                "o, @From1, @To1, @Oil_Company, @DepTime_IST, @DepTime_UTC, @Dep_Fuel, @Burn_fuel"& _ 
                ", @Arr_IST, @Arr_UTC)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_date", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reg_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reg_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bay_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bay_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "From1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Oil_Company", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Oil_Company", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepTime_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepTime_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DepTime_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DepTime_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dep_Fuel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Dep_Fuel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Burn_fuel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Burn_fuel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Arr_IST", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Arr_IST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Arr_UTC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Arr_UTC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Flight_no, Flight_date, Reg_no, Bay_no, From1, To1, Oil_Company, DepTime_I"& _ 
                "ST, DepTime_UTC, Dep_Fuel, Burn_fuel, Arr_IST, Arr_UTC FROM dbo.FuelManagement"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.FuelManagementDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.FuelManagementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.FuelManagementDataTable = New JETAIRWAYSDataSet.FuelManagementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.FuelManagementDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FuelManagement")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Flight_no As String, ByVal Flight_date As String, ByVal Reg_no As String, ByVal Bay_no As String, ByVal From1 As String, ByVal To1 As String, ByVal Oil_Company As String, ByVal DepTime_IST As String, ByVal DepTime_UTC As String, ByVal Dep_Fuel As String, ByVal Burn_fuel As String, ByVal Arr_IST As String, ByVal Arr_UTC As String) As Integer
            If (Flight_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_no")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Flight_no,String)
            End If
            If (Flight_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_date")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Flight_date,String)
            End If
            If (Reg_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Reg_no")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Reg_no,String)
            End If
            If (Bay_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Bay_no")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Bay_no,String)
            End If
            If (From1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("From1")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(From1,String)
            End If
            If (To1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("To1")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(To1,String)
            End If
            If (Oil_Company Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Oil_Company")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Oil_Company,String)
            End If
            If (DepTime_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DepTime_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DepTime_IST,String)
            End If
            If (DepTime_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DepTime_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DepTime_UTC,String)
            End If
            If (Dep_Fuel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Dep_Fuel")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Dep_Fuel,String)
            End If
            If (Burn_fuel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Burn_fuel")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Burn_fuel,String)
            End If
            If (Arr_IST Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Arr_IST")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Arr_IST,String)
            End If
            If (Arr_UTC Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Arr_UTC")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Arr_UTC,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LogintableTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Logintable"
            tableMapping.ColumnMappings.Add("User_id", "User_id")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("Department", "Department")
            tableMapping.ColumnMappings.Add("Designation", "Designation")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Logintable] ([User_id], [Password], [Department], [Designation"& _ 
                "]) VALUES (@User_id, @Password, @Department, @Designation)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_id", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Department", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Department", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Designation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Designation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT User_id, Password, Department, Designation FROM dbo.Logintable"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.LogintableDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.LogintableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.LogintableDataTable = New JETAIRWAYSDataSet.LogintableDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.LogintableDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Logintable")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal User_id As String, ByVal Password As String, ByVal Department As String, ByVal Designation As String) As Integer
            If (User_id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("User_id")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(User_id,String)
            End If
            If (Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Password")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Password,String)
            End If
            If (Department Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Department,String)
            End If
            If (Designation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Designation,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PassengersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Passengers"
            tableMapping.ColumnMappings.Add("Flight_no", "Flight_no")
            tableMapping.ColumnMappings.Add("Flight_date", "Flight_date")
            tableMapping.ColumnMappings.Add("From", "From")
            tableMapping.ColumnMappings.Add("To", "To")
            tableMapping.ColumnMappings.Add("Leg_no", "Leg_no")
            tableMapping.ColumnMappings.Add("First1", "First1")
            tableMapping.ColumnMappings.Add("First2", "First2")
            tableMapping.ColumnMappings.Add("Premier1", "Premier1")
            tableMapping.ColumnMappings.Add("premier2", "premier2")
            tableMapping.ColumnMappings.Add("Eco1", "Eco1")
            tableMapping.ColumnMappings.Add("Eco2", "Eco2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Passengers] ([Flight_no], [Flight_date], [From], [To], [Leg_no"& _ 
                "], [First1], [First2], [Premier1], [premier2], [Eco1], [Eco2]) VALUES (@Flight_n"& _ 
                "o, @Flight_date, @From, @To, @Leg_no, @First1, @First2, @Premier1, @premier2, @E"& _ 
                "co1, @Eco2)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flight_date", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flight_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@From", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Leg_no", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Leg_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@First1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "First1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@First2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "First2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Premier1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Premier1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@premier2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "premier2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Eco1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Eco1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Eco2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Eco2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Flight_no, Flight_date, [From], [To], Leg_no, First1, First2, Premier1, pr"& _ 
                "emier2, Eco1, Eco2 FROM dbo.Passengers"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.PassengersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.PassengersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.PassengersDataTable = New JETAIRWAYSDataSet.PassengersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.PassengersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Passengers")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Flight_no As String, ByVal Flight_date As String, ByVal From As String, ByVal _To As String, ByVal Leg_no As String, ByVal First1 As String, ByVal First2 As String, ByVal Premier1 As String, ByVal premier2 As String, ByVal Eco1 As String, ByVal Eco2 As String) As Integer
            If (Flight_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_no")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Flight_no,String)
            End If
            If (Flight_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Flight_date")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Flight_date,String)
            End If
            If (From Is Nothing) Then
                Throw New Global.System.ArgumentNullException("From")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(From,String)
            End If
            If (_To Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_To")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_To,String)
            End If
            If (Leg_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Leg_no")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Leg_no,String)
            End If
            If (First1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("First1")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(First1,String)
            End If
            If (First2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("First2")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(First2,String)
            End If
            If (Premier1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Premier1")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Premier1,String)
            End If
            If (premier2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("premier2")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(premier2,String)
            End If
            If (Eco1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Eco1")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Eco1,String)
            End If
            If (Eco2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Eco2")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Eco2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PaySlipTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PaySlip"
            tableMapping.ColumnMappings.Add("EmployeeNo", "EmployeeNo")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("ChequeNo", "ChequeNo")
            tableMapping.ColumnMappings.Add("Department", "Department")
            tableMapping.ColumnMappings.Add("HRA", "HRA")
            tableMapping.ColumnMappings.Add("DA", "DA")
            tableMapping.ColumnMappings.Add("TA", "TA")
            tableMapping.ColumnMappings.Add("SalaryduringOT", "SalaryduringOT")
            tableMapping.ColumnMappings.Add("Allowance", "Allowance")
            tableMapping.ColumnMappings.Add("PF", "PF")
            tableMapping.ColumnMappings.Add("Increment", "Increment")
            tableMapping.ColumnMappings.Add("SalaryDeductedForLeaves", "SalaryDeductedForLeaves")
            tableMapping.ColumnMappings.Add("Incometax", "Incometax")
            tableMapping.ColumnMappings.Add("Deduction", "Deduction")
            tableMapping.ColumnMappings.Add("NetSalary", "NetSalary")
            tableMapping.ColumnMappings.Add("PT", "PT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PaySlip] ([EmployeeNo], [Date], [ChequeNo], [Department], [HRA"& _ 
                "], [DA], [TA], [SalaryduringOT], [Allowance], [PF], [Increment], [SalaryDeducted"& _ 
                "ForLeaves], [Incometax], [Deduction], [NetSalary], [PT]) VALUES (@EmployeeNo, @D"& _ 
                "ate, @ChequeNo, @Department, @HRA, @DA, @TA, @SalaryduringOT, @Allowance, @PF, @"& _ 
                "Increment, @SalaryDeductedForLeaves, @Incometax, @Deduction, @NetSalary, @PT)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmployeeNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmployeeNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChequeNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChequeNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Department", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Department", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HRA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SalaryduringOT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SalaryduringOT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Allowance", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Allowance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Increment", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Increment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SalaryDeductedForLeaves", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SalaryDeductedForLeaves", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Incometax", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Incometax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Deduction", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Deduction", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NetSalary", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NetSalary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT EmployeeNo, Date, ChequeNo, Department, HRA, DA, TA, SalaryduringOT, Allow"& _ 
                "ance, PF, Increment, SalaryDeductedForLeaves, Incometax, Deduction, NetSalary, P"& _ 
                "T FROM dbo.PaySlip"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.PaySlipDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.PaySlipDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.PaySlipDataTable = New JETAIRWAYSDataSet.PaySlipDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.PaySlipDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PaySlip")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal EmployeeNo As String,  _
                    ByVal _Date As Global.System.Nullable(Of Date),  _
                    ByVal ChequeNo As String,  _
                    ByVal Department As String,  _
                    ByVal HRA As String,  _
                    ByVal DA As String,  _
                    ByVal TA As String,  _
                    ByVal SalaryduringOT As String,  _
                    ByVal Allowance As String,  _
                    ByVal PF As String,  _
                    ByVal Increment As String,  _
                    ByVal SalaryDeductedForLeaves As String,  _
                    ByVal Incometax As String,  _
                    ByVal Deduction As String,  _
                    ByVal NetSalary As String,  _
                    ByVal PT As String) As Integer
            If (EmployeeNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(EmployeeNo,String)
            End If
            If (_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ChequeNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ChequeNo,String)
            End If
            If (Department Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Department,String)
            End If
            If (HRA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(HRA,String)
            End If
            If (DA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DA,String)
            End If
            If (TA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TA,String)
            End If
            If (SalaryduringOT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SalaryduringOT,String)
            End If
            If (Allowance Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Allowance,String)
            End If
            If (PF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PF,String)
            End If
            If (Increment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Increment,String)
            End If
            If (SalaryDeductedForLeaves Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SalaryDeductedForLeaves,String)
            End If
            If (Incometax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Incometax,String)
            End If
            If (Deduction Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Deduction,String)
            End If
            If (NetSalary Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NetSalary,String)
            End If
            If (PT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TrainingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Training"
            tableMapping.ColumnMappings.Add("Training_date", "Training_date")
            tableMapping.ColumnMappings.Add("Day", "Day")
            tableMapping.ColumnMappings.Add("Time", "Time")
            tableMapping.ColumnMappings.Add("TakenBy", "TakenBy")
            tableMapping.ColumnMappings.Add("Emp", "Emp")
            tableMapping.ColumnMappings.Add("Held", "Held")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Training] ([Training_date], [Day], [Time], [TakenBy], [Emp], ["& _ 
                "Held]) VALUES (@Training_date, @Day, @Time, @TakenBy, @Emp, @Held)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Training_date", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Training_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Day", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Day", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Time", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Time", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TakenBy", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TakenBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Emp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Emp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Held", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Held", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.JET_AIRWAYS.My.MySettings.Default.JETAIRWAYSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Training_date, Day, Time, TakenBy, Emp, Held FROM dbo.Training"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As JETAIRWAYSDataSet.TrainingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As JETAIRWAYSDataSet.TrainingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As JETAIRWAYSDataSet.TrainingDataTable = New JETAIRWAYSDataSet.TrainingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As JETAIRWAYSDataSet.TrainingDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Training")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Training_date As String, ByVal Day As String, ByVal Time As String, ByVal TakenBy As String, ByVal Emp As String, ByVal Held As String) As Integer
            If (Training_date Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Training_date")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Training_date,String)
            End If
            If (Day Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Day")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Day,String)
            End If
            If (Time Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Time")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Time,String)
            End If
            If (TakenBy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TakenBy")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TakenBy,String)
            End If
            If (Emp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Emp")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Emp,String)
            End If
            If (Held Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Held")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Held,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _attendanceTableAdapter As AttendanceTableAdapter
        
        Private _cBriefTableAdapter As CBriefTableAdapter
        
        Private _dBriefTableAdapter As DBriefTableAdapter
        
        Private _designationTableAdapter As DesignationTableAdapter
        
        Private _employee_entryTableAdapter As Employee_entryTableAdapter
        
        Private _eventTableAdapter As EventTableAdapter
        
        Private _fleetTableAdapter As FleetTableAdapter
        
        Private _flightTableAdapter As FlightTableAdapter
        
        Private _flightscheduleTableAdapter As FlightscheduleTableAdapter
        
        Private _fuelManagementTableAdapter As FuelManagementTableAdapter
        
        Private _logintableTableAdapter As LogintableTableAdapter
        
        Private _passengersTableAdapter As PassengersTableAdapter
        
        Private _paySlipTableAdapter As PaySlipTableAdapter
        
        Private _trainingTableAdapter As TrainingTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AttendanceTableAdapter() As AttendanceTableAdapter
            Get
                Return Me._attendanceTableAdapter
            End Get
            Set
                If ((Not (Me._attendanceTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._attendanceTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._attendanceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CBriefTableAdapter() As CBriefTableAdapter
            Get
                Return Me._cBriefTableAdapter
            End Get
            Set
                If ((Not (Me._cBriefTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._cBriefTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._cBriefTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DBriefTableAdapter() As DBriefTableAdapter
            Get
                Return Me._dBriefTableAdapter
            End Get
            Set
                If ((Not (Me._dBriefTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._dBriefTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._dBriefTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DesignationTableAdapter() As DesignationTableAdapter
            Get
                Return Me._designationTableAdapter
            End Get
            Set
                If ((Not (Me._designationTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._designationTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._designationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Employee_entryTableAdapter() As Employee_entryTableAdapter
            Get
                Return Me._employee_entryTableAdapter
            End Get
            Set
                If ((Not (Me._employee_entryTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._employee_entryTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._employee_entryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EventTableAdapter() As EventTableAdapter
            Get
                Return Me._eventTableAdapter
            End Get
            Set
                If ((Not (Me._eventTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._eventTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._eventTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FleetTableAdapter() As FleetTableAdapter
            Get
                Return Me._fleetTableAdapter
            End Get
            Set
                If ((Not (Me._fleetTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._fleetTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._fleetTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FlightTableAdapter() As FlightTableAdapter
            Get
                Return Me._flightTableAdapter
            End Get
            Set
                If ((Not (Me._flightTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._flightTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._flightTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FlightscheduleTableAdapter() As FlightscheduleTableAdapter
            Get
                Return Me._flightscheduleTableAdapter
            End Get
            Set
                If ((Not (Me._flightscheduleTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._flightscheduleTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._flightscheduleTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FuelManagementTableAdapter() As FuelManagementTableAdapter
            Get
                Return Me._fuelManagementTableAdapter
            End Get
            Set
                If ((Not (Me._fuelManagementTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._fuelManagementTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._fuelManagementTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LogintableTableAdapter() As LogintableTableAdapter
            Get
                Return Me._logintableTableAdapter
            End Get
            Set
                If ((Not (Me._logintableTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._logintableTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._logintableTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PassengersTableAdapter() As PassengersTableAdapter
            Get
                Return Me._passengersTableAdapter
            End Get
            Set
                If ((Not (Me._passengersTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._passengersTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._passengersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PaySlipTableAdapter() As PaySlipTableAdapter
            Get
                Return Me._paySlipTableAdapter
            End Get
            Set
                If ((Not (Me._paySlipTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._paySlipTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._paySlipTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TrainingTableAdapter() As TrainingTableAdapter
            Get
                Return Me._trainingTableAdapter
            End Get
            Set
                If ((Not (Me._trainingTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._trainingTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._trainingTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._attendanceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._attendanceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._attendanceTableAdapter.Connection
                End If
                If ((Not (Me._cBriefTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cBriefTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cBriefTableAdapter.Connection
                End If
                If ((Not (Me._dBriefTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dBriefTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dBriefTableAdapter.Connection
                End If
                If ((Not (Me._designationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._designationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._designationTableAdapter.Connection
                End If
                If ((Not (Me._employee_entryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._employee_entryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._employee_entryTableAdapter.Connection
                End If
                If ((Not (Me._eventTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eventTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eventTableAdapter.Connection
                End If
                If ((Not (Me._fleetTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fleetTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fleetTableAdapter.Connection
                End If
                If ((Not (Me._flightTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._flightTableAdapter.Connection) Is Nothing)) Then
                    Return Me._flightTableAdapter.Connection
                End If
                If ((Not (Me._flightscheduleTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._flightscheduleTableAdapter.Connection) Is Nothing)) Then
                    Return Me._flightscheduleTableAdapter.Connection
                End If
                If ((Not (Me._fuelManagementTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fuelManagementTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fuelManagementTableAdapter.Connection
                End If
                If ((Not (Me._logintableTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._logintableTableAdapter.Connection) Is Nothing)) Then
                    Return Me._logintableTableAdapter.Connection
                End If
                If ((Not (Me._passengersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._passengersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._passengersTableAdapter.Connection
                End If
                If ((Not (Me._paySlipTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._paySlipTableAdapter.Connection) Is Nothing)) Then
                    Return Me._paySlipTableAdapter.Connection
                End If
                If ((Not (Me._trainingTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trainingTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trainingTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._attendanceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cBriefTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dBriefTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._designationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._employee_entryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fleetTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._flightTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._flightscheduleTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fuelManagementTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._logintableTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._passengersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._paySlipTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trainingTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As JETAIRWAYSDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._fuelManagementTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FuelManagement.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fuelManagementTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._flightscheduleTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Flightschedule.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._flightscheduleTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._flightTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Flight.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._flightTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._logintableTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Logintable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._logintableTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trainingTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Training.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trainingTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._paySlipTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PaySlip.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._paySlipTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._passengersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Passengers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._passengersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dBriefTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DBrief.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dBriefTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cBriefTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CBrief.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cBriefTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._attendanceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Attendance.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._attendanceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._designationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Designation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._designationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fleetTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Fleet.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fleetTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet._Event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._employee_entryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Employee_entry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._employee_entryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As JETAIRWAYSDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._fuelManagementTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FuelManagement.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fuelManagementTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._flightscheduleTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Flightschedule.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._flightscheduleTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._flightTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Flight.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._flightTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._logintableTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Logintable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._logintableTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trainingTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Training.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trainingTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._paySlipTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PaySlip.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._paySlipTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._passengersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Passengers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._passengersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dBriefTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DBrief.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dBriefTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cBriefTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CBrief.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cBriefTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._attendanceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Attendance.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._attendanceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._designationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Designation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._designationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fleetTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Fleet.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fleetTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet._Event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._employee_entryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Employee_entry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._employee_entryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As JETAIRWAYSDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._employee_entryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Employee_entry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._employee_entryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet._Event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fleetTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Fleet.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fleetTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._designationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Designation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._designationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._attendanceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Attendance.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._attendanceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cBriefTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CBrief.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cBriefTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dBriefTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DBrief.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dBriefTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._passengersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Passengers.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._passengersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._paySlipTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PaySlip.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._paySlipTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trainingTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Training.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trainingTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._logintableTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Logintable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._logintableTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._flightTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Flight.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._flightTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._flightscheduleTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Flightschedule.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._flightscheduleTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fuelManagementTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FuelManagement.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fuelManagementTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As JETAIRWAYSDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._attendanceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._attendanceTableAdapter, Me._attendanceTableAdapter.Connection)
                    Me._attendanceTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._attendanceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._attendanceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._attendanceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._attendanceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cBriefTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cBriefTableAdapter, Me._cBriefTableAdapter.Connection)
                    Me._cBriefTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cBriefTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cBriefTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cBriefTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cBriefTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dBriefTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dBriefTableAdapter, Me._dBriefTableAdapter.Connection)
                    Me._dBriefTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dBriefTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dBriefTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dBriefTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dBriefTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._designationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._designationTableAdapter, Me._designationTableAdapter.Connection)
                    Me._designationTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._designationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._designationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._designationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._designationTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._employee_entryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._employee_entryTableAdapter, Me._employee_entryTableAdapter.Connection)
                    Me._employee_entryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._employee_entryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._employee_entryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._employee_entryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._employee_entryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eventTableAdapter, Me._eventTableAdapter.Connection)
                    Me._eventTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eventTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eventTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eventTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eventTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fleetTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fleetTableAdapter, Me._fleetTableAdapter.Connection)
                    Me._fleetTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fleetTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fleetTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fleetTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fleetTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._flightTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._flightTableAdapter, Me._flightTableAdapter.Connection)
                    Me._flightTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._flightTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._flightTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._flightTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._flightTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._flightscheduleTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._flightscheduleTableAdapter, Me._flightscheduleTableAdapter.Connection)
                    Me._flightscheduleTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._flightscheduleTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._flightscheduleTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._flightscheduleTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._flightscheduleTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fuelManagementTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fuelManagementTableAdapter, Me._fuelManagementTableAdapter.Connection)
                    Me._fuelManagementTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fuelManagementTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fuelManagementTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fuelManagementTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fuelManagementTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._logintableTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._logintableTableAdapter, Me._logintableTableAdapter.Connection)
                    Me._logintableTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._logintableTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._logintableTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._logintableTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._logintableTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._passengersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._passengersTableAdapter, Me._passengersTableAdapter.Connection)
                    Me._passengersTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._passengersTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._passengersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._passengersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._passengersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._paySlipTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._paySlipTableAdapter, Me._paySlipTableAdapter.Connection)
                    Me._paySlipTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._paySlipTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._paySlipTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._paySlipTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._paySlipTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trainingTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trainingTableAdapter, Me._trainingTableAdapter.Connection)
                    Me._trainingTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trainingTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trainingTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trainingTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trainingTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._attendanceTableAdapter) Is Nothing) Then
                    Me._attendanceTableAdapter.Connection = CType(revertConnections(Me._attendanceTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._attendanceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cBriefTableAdapter) Is Nothing) Then
                    Me._cBriefTableAdapter.Connection = CType(revertConnections(Me._cBriefTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cBriefTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dBriefTableAdapter) Is Nothing) Then
                    Me._dBriefTableAdapter.Connection = CType(revertConnections(Me._dBriefTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dBriefTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._designationTableAdapter) Is Nothing) Then
                    Me._designationTableAdapter.Connection = CType(revertConnections(Me._designationTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._designationTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._employee_entryTableAdapter) Is Nothing) Then
                    Me._employee_entryTableAdapter.Connection = CType(revertConnections(Me._employee_entryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._employee_entryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    Me._eventTableAdapter.Connection = CType(revertConnections(Me._eventTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eventTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fleetTableAdapter) Is Nothing) Then
                    Me._fleetTableAdapter.Connection = CType(revertConnections(Me._fleetTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fleetTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._flightTableAdapter) Is Nothing) Then
                    Me._flightTableAdapter.Connection = CType(revertConnections(Me._flightTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._flightTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._flightscheduleTableAdapter) Is Nothing) Then
                    Me._flightscheduleTableAdapter.Connection = CType(revertConnections(Me._flightscheduleTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._flightscheduleTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fuelManagementTableAdapter) Is Nothing) Then
                    Me._fuelManagementTableAdapter.Connection = CType(revertConnections(Me._fuelManagementTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fuelManagementTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._logintableTableAdapter) Is Nothing) Then
                    Me._logintableTableAdapter.Connection = CType(revertConnections(Me._logintableTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._logintableTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._passengersTableAdapter) Is Nothing) Then
                    Me._passengersTableAdapter.Connection = CType(revertConnections(Me._passengersTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._passengersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._paySlipTableAdapter) Is Nothing) Then
                    Me._paySlipTableAdapter.Connection = CType(revertConnections(Me._paySlipTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._paySlipTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trainingTableAdapter) Is Nothing) Then
                    Me._trainingTableAdapter.Connection = CType(revertConnections(Me._trainingTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trainingTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
